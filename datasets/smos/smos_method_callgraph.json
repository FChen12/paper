{"ServletAddRemoveTeachingsAsAddress.doGet()": {"calls": [["ManagerAddress.hasTeaching()", "M"], ["ManagerTeaching.getTeachingById()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["DuplicatedEntityException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["ManagerAddress.getInstance()", "S"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerAddress.removeTeachingAsAddress()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["ManagerAddress.assignTeachingAsAddress()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletAddRemoveTeachingsAsAddress.doPost()", "M"]], "class_name": "ServletAddRemoveTeachingsAsAddress", "method_name": "doGet", "params": []}, "ManagerUser.getInstance()": {"calls": [], "called_by": [["ServletShowClassroomByAcademicYear.doGet()", "S"], ["ServletAssignParentStudent.doGet()", "S"], ["ServletShowUserList.doGet()", "S"], ["ServletInsertReport.doGet()", "S"], ["ServletUpdateReport.doGet()", "S"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "S"], ["ServletAssignStudentClassroom.doGet()", "S"], ["ServletLogin.doGet()", "S"], ["ServletShowJustifyList.doGet()", "S"], ["ServletRemoveStudentClassroom.doGet()", "S"], ["ServletShowUserRoleForm.doGet()", "S"], ["ServletShowNoteDetails.doGet()", "S"], ["ServletUpdateJustify.doGet()", "S"], ["ServletShowTeacherTeachingFormByClass.doGet()", "S"], ["ServletAddressTeachings.doGet()", "S"], ["ServletDeleteNote.doGet()", "S"], ["ServletUpdateRegister.doGet()", "S"], ["ServletReportTeachings.doGet()", "S"], ["ServletShowAddressDetails.doGet()", "S"], ["ServletLoadClassByAccademicYear.doGet()", "S"], ["ServletLoadYear.doGet()", "S"], ["ManagerRegister.getRegisterByClassIDAndDate()", "S"], ["ServletLoadReport.doGet()", "S"], ["ServletAlterPersonalDate.doGet()", "S"], ["ServletDeleteTeaching.doGet()", "S"], ["ServletRemoveTeachingAsTeacher.doGet()", "S"], ["ServletShowClassroomManagement.doGet()", "S"], ["ManagerClassroom.getClassroomsByStudent()", "S"], ["ServletShowTeachingDetails.doGet()", "S"], ["ServletDeleteAddress.doGet()", "S"], ["ServletInsertAddress.doGet()", "S"], ["ServletInsertTeaching.doGet()", "S"], ["ServletAddTeachingAsTeacher.doGet()", "S"], ["ServletInsertUser.doGet()", "S"], ["ServletShowRegister.doGet()", "S"], ["ServletDeleteReport.doGet()", "S"], ["ServletShowTeachingList.doGet()", "S"], ["ServletInsertJustify.doGet()", "S"], ["ServletComputateStatistics.doGet()", "S"], ["ServletShowClassroomDetails.doGet()", "S"], ["ManagerClassroom.getClassroomsByTeacher()", "S"], ["ServletLoadTeachingList.doGet()", "S"], ["ServletShowNoteList.doGet()", "S"], ["ServletInsertClassroom.doGet()", "S"], ["ServletInsertNewNote.doGet()", "S"], ["ServletShowJustifyDetails.doGet()", "S"], ["ServletShowReports.doGet()", "S"], ["ServletDeleteJustify.doGet()", "S"], ["ServletDeleteClassroom.doGet()", "S"], ["ServletUpdateUser.doGet()", "S"], ["ServletShowAddressList.doGet()", "S"], ["ServletShowUserDetails.doGet()", "S"], ["ServletShowUserTeachingForm.doGet()", "S"], ["ServletShowClassroomList.doGet()", "S"], ["ServletUpdateTeaching.doGet()", "S"], ["ServletShowStudentsByClass.doGet()", "S"], ["ServletDeleteUser.doGet()", "S"], ["ServletAssignRole.doGet()", "S"]], "class_name": "ManagerUser", "method_name": "getInstance", "params": []}, "ManagerTeaching.getInstance()": {"calls": [], "called_by": [["ServletShowTeachingDetails.doGet()", "S"], ["ServletReportTeachings.doGet()", "S"], ["ServletInsertTeaching.doGet()", "S"], ["ServletAddTeachingAsTeacher.doGet()", "S"], ["ServletUpdateReport.doGet()", "S"], ["ServletLoadReport.doGet()", "S"], ["ServletInsertReport.doGet()", "S"], ["ServletShowTeachingList.doGet()", "S"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "S"], ["ServletDeleteTeaching.doGet()", "S"], ["ServletUpdateTeaching.doGet()", "S"], ["ServletRemoveTeachingAsTeacher.doGet()", "S"], ["ServletAddressTeachings.doGet()", "S"], ["ServletShowTeacherTeachingFormByClass.doGet()", "S"], ["ServletLoadTeachingList.doGet()", "S"]], "class_name": "ManagerTeaching", "method_name": "getInstance", "params": []}, "ManagerAddress.getInstance()": {"calls": [], "called_by": [["ServletDeleteAddress.doGet()", "S"], ["ServletShowAddressList.doGet()", "S"], ["ManagerAddress.removeTeachingAsAddress()", "S"], ["ServletShowAddressDetails.doGet()", "S"], ["ManagerAddress.assignTeachingAsAddress()", "S"], ["ServletInsertAddress.doGet()", "S"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "S"]], "class_name": "ManagerAddress", "method_name": "getInstance", "params": []}, "ManagerUser.isAdministrator()": {"calls": [], "called_by": [["ServletShowClassroomDetails.doGet()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["ServletLoadTeachingList.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletShowJustifyDetails.doGet()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletShowAddressList.doGet()", "M"], ["ServletShowUserDetails.doGet()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletShowClassroomList.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ServletShowStudentsByClass.doGet()", "M"], ["ServletDeleteUser.doGet()", "M"], ["ServletAssignRole.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"], ["ServletShowClassroomByAcademicYear.doGet()", "M"], ["ServletShowUserList.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"], ["ServletAssignParentStudent.doGet()", "M"], ["ServletAssignStudentClassroom.doGet()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletLogin.doGet()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletUpdateJustify.doGet()", "M"], ["ServletShowTeacherTeachingFormByClass.doGet()", "M"], ["ServletAddressTeachings.doGet()", "M"], ["ServletDeleteNote.doGet()", "M"], ["ServletUpdateRegister.doGet()", "M"], ["ServletLoadClassByAccademicYear.doGet()", "M"], ["ServletLoadYear.doGet()", "M"], ["ServletReportTeachings.doGet()", "M"], ["ServletShowAddressDetails.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletDeleteTeaching.doGet()", "M"], ["ServletShowClassroomManagement.doGet()", "M"], ["ServletShowTeachingDetails.doGet()", "M"], ["ServletDeleteAddress.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletShowTeachingList.doGet()", "M"], ["ServletInsertJustify.doGet()", "M"], ["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletDeleteReport.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "isAdministrator", "params": []}, "ManagerTeaching.getTeachingById()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["ManagerTeaching.loadRecordFromRs()", "O"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"]], "called_by": [["ServletShowTeachingDetails.doGet()", "M"], ["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"]], "class_name": "ManagerTeaching", "method_name": "getTeachingById", "params": []}, "ManagerAddress.hasTeaching()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["Address.getIdAddress()", "M"], ["DBConnection.getConnection()", "S"], ["Teaching.getId()", "M"]], "called_by": [["ManagerAddress.removeTeachingAsAddress()", "M"], ["ManagerAddress.assignTeachingAsAddress()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"]], "class_name": "ManagerAddress", "method_name": "hasTeaching", "params": []}, "ManagerAddress.assignTeachingAsAddress()": {"calls": [["ManagerAddress.hasTeaching()", "M"], ["Address.getIdAddress()", "M"], ["Utility.executeOperation()", "S"], ["ManagerAddress.getInstance()", "S"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Teaching.getId()", "M"]], "called_by": [["ServletAddRemoveTeachingsAsAddress.doGet()", "M"]], "class_name": "ManagerAddress", "method_name": "assignTeachingAsAddress", "params": []}, "ManagerAddress.removeTeachingAsAddress()": {"calls": [["ManagerAddress.hasTeaching()", "M"], ["Address.getIdAddress()", "M"], ["Utility.executeOperation()", "S"], ["ManagerAddress.getInstance()", "S"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Teaching.getId()", "M"]], "called_by": [["ServletAddRemoveTeachingsAsAddress.doGet()", "M"]], "class_name": "ManagerAddress", "method_name": "removeTeachingAsAddress", "params": []}, "EntityNotFoundException.getMessage()": {"calls": [], "called_by": [["ServletShowClassroomDetails.doGet()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["ServletLoadTeachingList.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletShowJustifyDetails.doGet()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletShowAddressList.doGet()", "M"], ["ServletShowUserDetails.doGet()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletShowClassroomList.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ServletShowStudentsByClass.doGet()", "M"], ["ServletDeleteUser.doGet()", "M"], ["ServletAssignRole.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"], ["ServletShowClassroomByAcademicYear.doGet()", "M"], ["ServletShowUserList.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"], ["ServletAssignParentStudent.doGet()", "M"], ["ServletAssignStudentClassroom.doGet()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletLogin.doGet()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletUpdateJustify.doGet()", "M"], ["ServletShowTeacherTeachingFormByClass.doGet()", "M"], ["ServletAddressTeachings.doGet()", "M"], ["ServletDeleteNote.doGet()", "M"], ["ServletUpdateRegister.doGet()", "M"], ["ServletLoadClassByAccademicYear.doGet()", "M"], ["ServletLoadYear.doGet()", "M"], ["ServletReportTeachings.doGet()", "M"], ["ServletShowAddressDetails.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletDeleteTeaching.doGet()", "M"], ["ServletShowClassroomManagement.doGet()", "M"], ["ServletShowTeachingDetails.doGet()", "M"], ["ServletDeleteAddress.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletShowTeachingList.doGet()", "M"], ["ServletInsertJustify.doGet()", "M"], ["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletDeleteReport.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"]], "class_name": "EntityNotFoundException", "method_name": "getMessage", "params": []}, "EntityNotFoundException.printStackTrace()": {"calls": [], "called_by": [["ServletShowClassroomDetails.doGet()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["ServletLoadTeachingList.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletShowJustifyDetails.doGet()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletShowAddressList.doGet()", "M"], ["ServletShowUserDetails.doGet()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletShowClassroomList.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ServletShowStudentsByClass.doGet()", "M"], ["ServletDeleteUser.doGet()", "M"], ["ServletAssignRole.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"], ["ServletShowClassroomByAcademicYear.doGet()", "M"], ["ServletShowUserList.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"], ["ServletAssignParentStudent.doGet()", "M"], ["ServletAssignStudentClassroom.doGet()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletLogin.doGet()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletUpdateJustify.doGet()", "M"], ["ServletShowTeacherTeachingFormByClass.doGet()", "M"], ["ServletAddressTeachings.doGet()", "M"], ["ServletDeleteNote.doGet()", "M"], ["ServletUpdateRegister.doGet()", "M"], ["ServletLoadClassByAccademicYear.doGet()", "M"], ["ServletLoadYear.doGet()", "M"], ["ServletReportTeachings.doGet()", "M"], ["ServletShowAddressDetails.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletDeleteTeaching.doGet()", "M"], ["ServletShowClassroomManagement.doGet()", "M"], ["ServletShowTeachingDetails.doGet()", "M"], ["ServletDeleteAddress.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletShowTeachingList.doGet()", "M"], ["ServletInsertJustify.doGet()", "M"], ["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletDeleteReport.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"]], "class_name": "EntityNotFoundException", "method_name": "printStackTrace", "params": []}, "ConnectionException.getMessage()": {"calls": [], "called_by": [["ServletShowClassroomDetails.doGet()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["ServletLoadTeachingList.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletShowJustifyDetails.doGet()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletShowAddressList.doGet()", "M"], ["ServletShowUserDetails.doGet()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletShowClassroomList.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ServletShowStudentsByClass.doGet()", "M"], ["ServletDeleteUser.doGet()", "M"], ["ServletAssignRole.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"], ["ServletShowClassroomByAcademicYear.doGet()", "M"], ["ServletShowUserList.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"], ["ServletAssignParentStudent.doGet()", "M"], ["ServletAssignStudentClassroom.doGet()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletLogin.doGet()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletUpdateJustify.doGet()", "M"], ["ServletShowTeacherTeachingFormByClass.doGet()", "M"], ["ServletAddressTeachings.doGet()", "M"], ["ServletDeleteNote.doGet()", "M"], ["ServletUpdateRegister.doGet()", "M"], ["ServletLoadClassByAccademicYear.doGet()", "M"], ["ServletLoadYear.doGet()", "M"], ["ServletReportTeachings.doGet()", "M"], ["ServletShowAddressDetails.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletDeleteTeaching.doGet()", "M"], ["ServletShowClassroomManagement.doGet()", "M"], ["ServletShowTeachingDetails.doGet()", "M"], ["ServletDeleteAddress.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletShowTeachingList.doGet()", "M"], ["ServletInsertJustify.doGet()", "M"], ["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletDeleteReport.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"]], "class_name": "ConnectionException", "method_name": "getMessage", "params": []}, "ConnectionException.printStackTrace()": {"calls": [], "called_by": [["ServletShowClassroomDetails.doGet()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["ServletLoadTeachingList.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletShowJustifyDetails.doGet()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletShowAddressList.doGet()", "M"], ["ServletShowUserDetails.doGet()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletShowClassroomList.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ServletShowStudentsByClass.doGet()", "M"], ["ServletDeleteUser.doGet()", "M"], ["ServletAssignRole.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"], ["ServletShowClassroomByAcademicYear.doGet()", "M"], ["ServletShowUserList.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"], ["ServletAssignParentStudent.doGet()", "M"], ["ServletAssignStudentClassroom.doGet()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletLogin.doGet()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletUpdateJustify.doGet()", "M"], ["ServletShowTeacherTeachingFormByClass.doGet()", "M"], ["ServletAddressTeachings.doGet()", "M"], ["ServletDeleteNote.doGet()", "M"], ["ServletUpdateRegister.doGet()", "M"], ["ServletLoadClassByAccademicYear.doGet()", "M"], ["ServletLoadYear.doGet()", "M"], ["ServletReportTeachings.doGet()", "M"], ["ServletShowAddressDetails.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletDeleteTeaching.doGet()", "M"], ["ServletShowClassroomManagement.doGet()", "M"], ["ServletShowTeachingDetails.doGet()", "M"], ["ServletDeleteAddress.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletShowTeachingList.doGet()", "M"], ["ServletInsertJustify.doGet()", "M"], ["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletDeleteReport.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"]], "class_name": "ConnectionException", "method_name": "printStackTrace", "params": []}, "InvalidValueException.printStackTrace()": {"calls": [], "called_by": [["ServletShowClassroomDetails.doGet()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["ServletLoadTeachingList.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletShowJustifyDetails.doGet()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletShowAddressList.doGet()", "M"], ["ServletShowUserDetails.doGet()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletShowClassroomList.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ServletShowStudentsByClass.doGet()", "M"], ["ServletDeleteUser.doGet()", "M"], ["ServletAssignRole.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"], ["ServletShowClassroomByAcademicYear.doGet()", "M"], ["ServletShowUserList.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"], ["ServletAssignParentStudent.doGet()", "M"], ["ServletAssignStudentClassroom.doGet()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletLogin.doGet()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletShowTeacherTeachingFormByClass.doGet()", "M"], ["ServletAddressTeachings.doGet()", "M"], ["ServletDeleteNote.doGet()", "M"], ["ServletUpdateRegister.doGet()", "M"], ["ServletLoadClassByAccademicYear.doGet()", "M"], ["ServletLoadYear.doGet()", "M"], ["ServletReportTeachings.doGet()", "M"], ["ServletShowAddressDetails.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletDeleteTeaching.doGet()", "M"], ["ServletShowClassroomManagement.doGet()", "M"], ["ServletShowTeachingDetails.doGet()", "M"], ["ServletDeleteAddress.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletShowTeachingList.doGet()", "M"], ["ServletInsertJustify.doGet()", "M"], ["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletDeleteReport.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"]], "class_name": "InvalidValueException", "method_name": "printStackTrace", "params": []}, "MandatoryFieldException.printStackTrace()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletReportTeachings.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletDeleteTeaching.doGet()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ServletDeleteUser.doGet()", "M"], ["ServletDeleteAddress.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"], ["ServletAssignStudentClassroom.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletUpdateJustify.doGet()", "M"]], "class_name": "MandatoryFieldException", "method_name": "printStackTrace", "params": []}, "DuplicatedEntityException.printStackTrace()": {"calls": [], "called_by": [["ServletInsertClassroom.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletInsertJustify.doGet()", "M"], ["ServletAddRemoveTeachingsAsAddress.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"]], "class_name": "DuplicatedEntityException", "method_name": "printStackTrace", "params": []}, "ServletAddRemoveTeachingsAsAddress.doPost()": {"calls": [["ServletAddRemoveTeachingsAsAddress.doGet()", "M"]], "called_by": [], "class_name": "ServletAddRemoveTeachingsAsAddress", "method_name": "doPost", "params": []}, "ServletAddressTeachings.doGet()": {"calls": [["ManagerTeaching.getTeachings()", "M"], ["ManagerUser.getInstance()", "S"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletAddressTeachings.doPost()", "M"]], "class_name": "ServletAddressTeachings", "method_name": "doGet", "params": []}, "ManagerTeaching.getTeachings()": {"calls": [["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerTeaching.loadRecordsFromRs()", "O"]], "called_by": [["ServletShowTeachingList.doGet()", "M"], ["ServletAddressTeachings.doGet()", "M"]], "class_name": "ManagerTeaching", "method_name": "getTeachings", "params": []}, "ServletAddressTeachings.doPost()": {"calls": [["ServletAddressTeachings.doGet()", "M"]], "called_by": [], "class_name": "ServletAddressTeachings", "method_name": "doPost", "params": []}, "ServletDeleteAddress.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerAddress.delete()", "M"], ["ManagerAddress.getInstance()", "S"], ["MandatoryFieldException.printStackTrace()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletDeleteAddress.doPost()", "M"]], "class_name": "ServletDeleteAddress", "method_name": "doGet", "params": []}, "ManagerAddress.delete()": {"calls": [["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["Address.getIdAddress()", "M"], ["DBConnection.getConnection()", "S"], ["Utility.executeOperation()", "S"]], "called_by": [["ServletDeleteAddress.doGet()", "M"]], "class_name": "ManagerAddress", "method_name": "delete", "params": []}, "MandatoryFieldException.getMessage()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ServletDeleteAddress.doGet()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletDeleteTeaching.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletUpdateJustify.doGet()", "M"], ["ServletDeleteUser.doGet()", "M"]], "class_name": "MandatoryFieldException", "method_name": "getMessage", "params": []}, "InvalidValueException.getMessage()": {"calls": [], "called_by": [["ServletInsertClassroom.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["ServletLoadTeachingList.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletShowJustifyDetails.doGet()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletShowAddressList.doGet()", "M"], ["ServletShowUserDetails.doGet()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletShowClassroomList.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ServletDeleteUser.doGet()", "M"], ["ServletAssignRole.doGet()", "M"], ["ServletShowClassroomByAcademicYear.doGet()", "M"], ["ServletShowUserList.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletAssignParentStudent.doGet()", "M"], ["ServletLogin.doGet()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletShowTeacherTeachingFormByClass.doGet()", "M"], ["ServletDeleteNote.doGet()", "M"], ["ServletUpdateRegister.doGet()", "M"], ["ServletLoadClassByAccademicYear.doGet()", "M"], ["ServletLoadYear.doGet()", "M"], ["ServletReportTeachings.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletDeleteTeaching.doGet()", "M"], ["ServletShowClassroomManagement.doGet()", "M"], ["ServletDeleteAddress.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"], ["ServletShowTeachingList.doGet()", "M"], ["ServletInsertJustify.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"]], "class_name": "InvalidValueException", "method_name": "getMessage", "params": []}, "ServletDeleteAddress.doPost()": {"calls": [["ServletDeleteAddress.doGet()", "M"]], "called_by": [], "class_name": "ServletDeleteAddress", "method_name": "doPost", "params": []}, "ServletInsertAddress.doGet()": {"calls": [["ManagerAddress.insert()", "M"], ["ManagerAddress.exists()", "M"], ["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["DuplicatedEntityException.printStackTrace()", "M"], ["ManagerAddress.getInstance()", "S"], ["DuplicatedEntityException.getMessage()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["Address.setName()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletInsertAddress.doPost()", "M"]], "class_name": "ServletInsertAddress", "method_name": "doGet", "params": []}, "Address.setName()": {"calls": [], "called_by": [["ManagerAddress.loadRecordFromRs()", "M"], ["ServletInsertAddress.doGet()", "M"]], "class_name": "Address", "method_name": "setName", "params": []}, "ManagerAddress.exists()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Address.getName()", "M"]], "called_by": [["ServletInsertAddress.doGet()", "M"]], "class_name": "ManagerAddress", "method_name": "exists", "params": []}, "ManagerAddress.insert()": {"calls": [["Utility.isNull()", "S"], ["Utility.getMaxValue()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Address.setIdAddress()", "M"], ["Address.getName()", "M"], ["Utility.executeOperation()", "S"]], "called_by": [["ServletInsertAddress.doGet()", "M"]], "class_name": "ManagerAddress", "method_name": "insert", "params": []}, "DuplicatedEntityException.getMessage()": {"calls": [], "called_by": [["ServletInsertJustify.doGet()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletInsertAddress.doGet()", "M"]], "class_name": "DuplicatedEntityException", "method_name": "getMessage", "params": []}, "ServletInsertAddress.doPost()": {"calls": [["ServletInsertAddress.doGet()", "M"]], "called_by": [], "class_name": "ServletInsertAddress", "method_name": "doPost", "params": []}, "ServletShowAddressDetails.doGet()": {"calls": [["ManagerAddress.getAddressById()", "M"], ["ManagerUser.getInstance()", "S"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerAddress.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowAddressDetails.doPost()", "M"]], "class_name": "ServletShowAddressDetails", "method_name": "doGet", "params": []}, "ManagerAddress.getAddressById()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerAddress.loadRecordFromRs()", "O"]], "called_by": [["ServletShowAddressDetails.doGet()", "M"]], "class_name": "ManagerAddress", "method_name": "getAddressById", "params": []}, "ServletShowAddressDetails.doPost()": {"calls": [["ServletShowAddressDetails.doGet()", "M"]], "called_by": [], "class_name": "ServletShowAddressDetails", "method_name": "doPost", "params": []}, "ServletShowAddressList.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["ManagerAddress.getAddressList()", "M"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerAddress.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowAddressList.doPost()", "M"]], "class_name": "ServletShowAddressList", "method_name": "doGet", "params": []}, "ManagerAddress.getAddressList()": {"calls": [["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerAddress.loadRecordsFromRs()", "O"]], "called_by": [["ServletShowAddressList.doGet()", "M"]], "class_name": "ManagerAddress", "method_name": "getAddressList", "params": []}, "ServletShowAddressList.doPost()": {"calls": [["ServletShowAddressList.doGet()", "M"]], "called_by": [], "class_name": "ServletShowAddressList", "method_name": "doPost", "params": []}, "ServletDeleteClassroom.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["Classroom.getAcademicYear()", "M"], ["ManagerClassroom.getInstance()", "S"], ["MandatoryFieldException.printStackTrace()", "M"], ["ManagerClassroom.delete()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletDeleteClassroom.doPost()", "M"]], "class_name": "ServletDeleteClassroom", "method_name": "doGet", "params": []}, "ManagerClassroom.getInstance()": {"calls": [], "called_by": [["ServletShowClassroomByAcademicYear.doGet()", "S"], ["ServletAddTeachingAsTeacher.doGet()", "S"], ["ServletShowRegister.doGet()", "S"], ["ServletAssignStudentClassroom.doGet()", "S"], ["ServletComputateStatistics.doGet()", "S"], ["ServletRemoveStudentClassroom.doGet()", "S"], ["ServletShowClassroomDetails.doGet()", "S"], ["ServletShowTeacherTeachingFormByClass.doGet()", "S"], ["ServletReportTeachings.doGet()", "S"], ["ServletInsertClassroom.doGet()", "S"], ["ServletLoadClassByAccademicYear.doGet()", "S"], ["ServletLoadYear.doGet()", "S"], ["ServletDeleteClassroom.doGet()", "S"], ["ServletShowUserTeachingForm.doGet()", "S"], ["ServletShowClassroomList.doGet()", "S"], ["ServletShowStudentsByClass.doGet()", "S"], ["ManagerClassroom.getClassroomByUserAcademicYear()", "S"], ["ServletShowClassroomManagement.doGet()", "S"], ["ServletRemoveTeachingAsTeacher.doGet()", "S"]], "class_name": "ManagerClassroom", "method_name": "getInstance", "params": []}, "Classroom.getAcademicYear()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ManagerClassroom.exists()", "M"], ["ManagerClassroom.getClassroomByUserAcademicYear()", "M"], ["ServletInsertClassroom.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletDeleteClassroom.doGet()", "M"], ["ManagerClassroom.insert()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ManagerClassroom.update()", "M"]], "class_name": "Classroom", "method_name": "getAcademicYear", "params": []}, "ManagerClassroom.delete()": {"calls": [["Utility.isNull()", "S"], ["Classroom.getIdClassroom()", "M"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Utility.executeOperation()", "S"]], "called_by": [["ServletDeleteClassroom.doGet()", "M"]], "class_name": "ManagerClassroom", "method_name": "delete", "params": []}, "ServletDeleteClassroom.doPost()": {"calls": [["ServletDeleteClassroom.doGet()", "M"]], "called_by": [], "class_name": "ServletDeleteClassroom", "method_name": "doPost", "params": []}, "ServletInsertClassroom.doGet()": {"calls": [["ManagerClassroom.exists()", "M"], ["InvalidValueException.getMessage()", "M"], ["ManagerClassroom.getInstance()", "S"], ["Classroom.setAcademicYear()", "M"], ["Classroom.setName()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["ManagerUser.isAdministrator()", "M"], ["Classroom.setIdAddress()", "M"], ["ManagerUser.getInstance()", "S"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["DuplicatedEntityException.printStackTrace()", "M"], ["ManagerClassroom.insert()", "M"], ["DuplicatedEntityException.getMessage()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["Classroom.getAcademicYear()", "M"]], "called_by": [["ServletInsertClassroom.doPost()", "M"]], "class_name": "ServletInsertClassroom", "method_name": "doGet", "params": []}, "Classroom.setName()": {"calls": [], "called_by": [["ManagerClassroom.loadRecordFromRs()", "M"], ["ServletInsertClassroom.doGet()", "M"]], "class_name": "Classroom", "method_name": "setName", "params": []}, "Classroom.setAcademicYear()": {"calls": [], "called_by": [["ManagerClassroom.loadRecordFromRs()", "M"], ["ServletInsertClassroom.doGet()", "M"]], "class_name": "Classroom", "method_name": "setAcademicYear", "params": []}, "Classroom.setIdAddress()": {"calls": [], "called_by": [["ManagerClassroom.loadRecordFromRs()", "M"], ["ServletInsertClassroom.doGet()", "M"]], "class_name": "Classroom", "method_name": "setIdAddress", "params": []}, "ManagerClassroom.exists()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Classroom.getName()", "M"], ["Classroom.getAcademicYear()", "M"], ["Classroom.getIdAddress()", "M"]], "called_by": [["ServletInsertClassroom.doGet()", "M"]], "class_name": "ManagerClassroom", "method_name": "exists", "params": []}, "ManagerClassroom.insert()": {"calls": [["Utility.getMaxValue()", "S"], ["Classroom.getName()", "M"], ["Utility.executeOperation()", "S"], ["Classroom.getIdAddress()", "M"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Classroom.setIdClassroom()", "M"], ["Classroom.getAcademicYear()", "M"]], "called_by": [["ServletInsertClassroom.doGet()", "M"]], "class_name": "ManagerClassroom", "method_name": "insert", "params": []}, "ServletInsertClassroom.doPost()": {"calls": [["ServletInsertClassroom.doGet()", "M"]], "called_by": [], "class_name": "ServletInsertClassroom", "method_name": "doPost", "params": []}, "ServletShowClassroomDetails.doGet()": {"calls": [["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerClassroom.getInstance()", "S"], ["ManagerClassroom.getClassroomByID()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowClassroomDetails.doPost()", "M"]], "class_name": "ServletShowClassroomDetails", "method_name": "doGet", "params": []}, "ManagerClassroom.getClassroomByID()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerClassroom.loadRecordFromRs()", "O"]], "called_by": [["ServletShowClassroomDetails.doGet()", "M"], ["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletShowStudentsByClass.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["ServletShowTeacherTeachingFormByClass.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"]], "class_name": "ManagerClassroom", "method_name": "getClassroomByID", "params": []}, "ServletShowClassroomDetails.doPost()": {"calls": [["ServletShowClassroomDetails.doGet()", "M"]], "called_by": [], "class_name": "ServletShowClassroomDetails", "method_name": "doPost", "params": []}, "ServletShowClassroomList.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerClassroom.getClassroomsByAcademicYear()", "M"], ["ManagerClassroom.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowClassroomList.doPost()", "M"]], "class_name": "ServletShowClassroomList", "method_name": "doGet", "params": []}, "ManagerClassroom.getClassroomsByAcademicYear()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerClassroom.loadRecordsFromRs()", "O"]], "called_by": [["ServletShowClassroomManagement.doGet()", "M"], ["ServletLoadClassByAccademicYear.doGet()", "M"], ["ServletShowClassroomList.doGet()", "M"], ["ServletShowClassroomByAcademicYear.doGet()", "M"]], "class_name": "ManagerClassroom", "method_name": "getClassroomsByAcademicYear", "params": []}, "ServletShowClassroomList.doPost()": {"calls": [["ServletShowClassroomList.doGet()", "M"]], "called_by": [], "class_name": "ServletShowClassroomList", "method_name": "doPost", "params": []}, "ServletComputateStatistics.doGet()": {"calls": [["ManagerUser.getUserById()", "M"], ["ManagerUser.isDirector()", "M"], ["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerClassroom.getInstance()", "S"], ["ManagerUser.getHighlightsStudentNote()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.getHighlightsStudentAbsence()", "M"], ["ManagerUser.isAdministrator()", "M"], ["ManagerClassroom.getAcademicYearList()", "M"]], "called_by": [["ServletComputateStatistics.doPost()", "M"]], "class_name": "ServletComputateStatistics", "method_name": "doGet", "params": []}, "ManagerUser.isDirector()": {"calls": [], "called_by": [["ServletLoadClassByAccademicYear.doGet()", "M"], ["ServletLoadYear.doGet()", "M"], ["ServletShowClassroomByAcademicYear.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["ServletLogin.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"], ["ServletShowStudentsByClass.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "isDirector", "params": []}, "ManagerClassroom.getAcademicYearList()": {"calls": [["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerClassroom.loadIntegersFromRs()", "O"]], "called_by": [["ServletLoadYear.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"]], "class_name": "ManagerClassroom", "method_name": "getAcademicYearList", "params": []}, "ManagerUser.getHighlightsStudentAbsence()": {"calls": [], "called_by": [["ServletComputateStatistics.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "getHighlightsStudentAbsence", "params": []}, "ManagerUser.getUserById()": {"calls": [], "called_by": [["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletShowUserDetails.doGet()", "M"], ["ServletComputateStatistics.doGet()", "M"], ["ServletShowJustifyList.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"], ["ServletShowNoteList.doGet()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletAssignParentStudent.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "getUserById", "params": []}, "ManagerUser.getHighlightsStudentNote()": {"calls": [], "called_by": [["ServletComputateStatistics.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "getHighlightsStudentNote", "params": []}, "ServletComputateStatistics.doPost()": {"calls": [["ServletComputateStatistics.doGet()", "M"]], "called_by": [], "class_name": "ServletComputateStatistics", "method_name": "doPost", "params": []}, "ServletDeleteJustify.doGet()": {"calls": [["ManagerRegister.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ManagerRegister.deleteJustify()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["Justify.getIdJustify()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerRegister.exists()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletDeleteJustify.doPost()", "M"]], "class_name": "ServletDeleteJustify", "method_name": "doGet", "params": []}, "ManagerRegister.getInstance()": {"calls": [], "called_by": [["ServletDeleteNote.doGet()", "S"], ["ServletShowNoteList.doGet()", "S"], ["ServletUpdateRegister.doGet()", "S"], ["ServletInsertNewNote.doGet()", "S"], ["ServletShowJustifyDetails.doGet()", "S"], ["ServletShowRegister.doGet()", "S"], ["ServletInsertJustify.doGet()", "S"], ["ServletShowJustifyList.doGet()", "S"], ["ServletDeleteJustify.doGet()", "S"], ["ServletShowNoteDetails.doGet()", "S"], ["ServletUpdateJustify.doGet()", "S"], ["TestRegister.main()", "S"]], "class_name": "ManagerRegister", "method_name": "getInstance", "params": []}, "ManagerRegister.exists()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["Justify.getIdJustify()", "M"], ["DBConnection.getConnection()", "S"], ["Absence.getIdAbsence()", "M"], ["Delay.getIdDelay()", "M"]], "called_by": [["ServletInsertJustify.doGet()", "M"], ["ServletUpdateJustify.doGet()", "M"], ["ServletDeleteJustify.doGet()", "M"], ["ManagerRegister.getJustifyByAbsence()", "M"], ["ManagerRegister.hasJustify()", "M"]], "class_name": "ManagerRegister", "method_name": "exists", "params": []}, "Justify.getIdJustify()": {"calls": [], "called_by": [["ServletDeleteJustify.doGet()", "M"], ["ManagerRegister.updateJustify()", "M"], ["ManagerRegister.exists()", "M"], ["ManagerRegister.insertJustify()", "M"]], "class_name": "Justify", "method_name": "getIdJustify", "params": []}, "ManagerRegister.deleteJustify()": {"calls": [["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["Absence.setIdJustify()", "M"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.updateAbsence()", "M"], ["ManagerRegister.getAbsenceByIdJustify()", "M"], ["Utility.executeOperation()", "S"]], "called_by": [["ServletDeleteJustify.doGet()", "M"], ["ManagerRegister.deleteAbsence()", "M"]], "class_name": "ManagerRegister", "method_name": "deleteJustify", "params": []}, "ServletDeleteJustify.doPost()": {"calls": [["ServletDeleteJustify.doGet()", "M"]], "called_by": [], "class_name": "ServletDeleteJustify", "method_name": "doPost", "params": []}, "ServletDeleteNote.doGet()": {"calls": [["ManagerRegister.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerRegister.deleteNote()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletDeleteNote.doPost()", "M"]], "class_name": "ServletDeleteNote", "method_name": "doGet", "params": []}, "ManagerRegister.deleteNote()": {"calls": [["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Note.getIdNote()", "M"], ["Utility.executeOperation()", "S"]], "called_by": [["ServletDeleteNote.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "deleteNote", "params": []}, "ServletDeleteNote.doPost()": {"calls": [["ServletDeleteNote.doGet()", "M"]], "called_by": [], "class_name": "ServletDeleteNote", "method_name": "doPost", "params": []}, "ServletInsertJustify.doGet()": {"calls": [["ManagerRegister.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["DuplicatedEntityException.printStackTrace()", "M"], ["Justify.setAcademicYear()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerRegister.exists()", "M"], ["ManagerRegister.insertJustify()", "M"], ["Utility.String2Date()", "S"], ["DuplicatedEntityException.getMessage()", "M"], ["Justify.setIdUser()", "M"], ["ManagerRegister.getAbsenceByIdAbsence()", "M"], ["Justify.setDateJustify()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletInsertJustify.doPost()", "M"]], "class_name": "ServletInsertJustify", "method_name": "doGet", "params": []}, "Justify.setAcademicYear()": {"calls": [], "called_by": [["ServletInsertJustify.doGet()", "M"], ["ManagerRegister.loadJustifyFromRs()", "M"], ["ServletUpdateJustify.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "Justify", "method_name": "setAcademicYear", "params": []}, "Utility.String2Date()": {"calls": [], "called_by": [["ServletInsertJustify.doGet()", "S"], ["ServletUpdateRegister.doGet()", "S"], ["ServletInsertNewNote.doGet()", "S"], ["ServletShowNoteDetails.doGet()", "S"], ["ServletUpdateJustify.doGet()", "S"], ["ServletShowRegister.doGet()", "S"]], "class_name": "Utility", "method_name": "String2Date", "params": []}, "Justify.setDateJustify()": {"calls": [], "called_by": [["ServletInsertJustify.doGet()", "M"], ["ManagerRegister.loadJustifyFromRs()", "M"], ["ServletUpdateJustify.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "Justify", "method_name": "setDateJustify", "params": []}, "Justify.setIdUser()": {"calls": [], "called_by": [["ServletInsertJustify.doGet()", "M"], ["ManagerRegister.loadJustifyFromRs()", "M"], ["TestRegister.main()", "M"]], "class_name": "Justify", "method_name": "setIdUser", "params": []}, "ManagerRegister.getAbsenceByIdAbsence()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.loadAbsenceFromRs()", "O"]], "called_by": [["ServletInsertJustify.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "getAbsenceByIdAbsence", "params": []}, "ManagerRegister.insertJustify()": {"calls": [["Utility.getMaxValue()", "S"], ["Justify.getIdUser()", "M"], ["Utility.executeOperation()", "S"], ["Justify.getDateJustify()", "M"], ["Justify.getIdJustify()", "M"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["Absence.setIdJustify()", "M"], ["DBConnection.getConnection()", "S"], ["Justify.setIdJustify()", "M"], ["Justify.getAcademicYear()", "M"], ["ManagerRegister.updateAbsence()", "M"]], "called_by": [["ServletInsertJustify.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "insertJustify", "params": []}, "ServletInsertJustify.doPost()": {"calls": [["ServletInsertJustify.doGet()", "M"]], "called_by": [], "class_name": "ServletInsertJustify", "method_name": "doPost", "params": []}, "ServletInsertNewNote.doGet()": {"calls": [["InvalidValueException.getMessage()", "M"], ["Utility.String2Date()", "S"], ["Note.setAcademicYear()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerRegister.insertNote()", "M"], ["Note.setIdUser()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["Note.setDateNote()", "M"], ["ManagerRegister.getInstance()", "S"], ["ManagerUser.getInstance()", "S"], ["User.getId()", "M"], ["Note.setDescription()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["Note.setTeacher()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["Classroom.getAcademicYear()", "M"]], "called_by": [["ServletInsertNewNote.doPost()", "M"]], "class_name": "ServletInsertNewNote", "method_name": "doGet", "params": []}, "User.getId()": {"calls": [], "called_by": [["ServletInsertNewNote.doGet()", "M"], ["ManagerClassroom.getClassroomsByTeacherAcademicYear()", "M"], ["ServletShowReports.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletAssignParentStudent.doGet()", "M"], ["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"]], "class_name": "User", "method_name": "getId", "params": []}, "Note.setAcademicYear()": {"calls": [], "called_by": [["ManagerRegister.loadNoteFromRs()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "Note", "method_name": "setAcademicYear", "params": []}, "Note.setDateNote()": {"calls": [], "called_by": [["ManagerRegister.loadNoteFromRs()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "Note", "method_name": "setDateNote", "params": []}, "Note.setIdUser()": {"calls": [], "called_by": [["ManagerRegister.loadNoteFromRs()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "Note", "method_name": "setIdUser", "params": []}, "Note.setTeacher()": {"calls": [], "called_by": [["ManagerRegister.loadNoteFromRs()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "Note", "method_name": "setTeacher", "params": []}, "Note.setDescription()": {"calls": [], "called_by": [["ManagerRegister.loadNoteFromRs()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["ServletInsertNewNote.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "Note", "method_name": "setDescription", "params": []}, "ManagerRegister.insertNote()": {"calls": [["Utility.getMaxValue()", "S"], ["Note.getTeacher()", "M"], ["Utility.executeOperation()", "S"], ["Note.getIdUser()", "M"], ["Note.setIdNote()", "M"], ["Utility.isNull()", "S"], ["Note.getDateNote()", "M"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Note.getDescription()", "M"], ["Note.getAcademicYear()", "M"]], "called_by": [["ServletInsertNewNote.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "insertNote", "params": []}, "ServletInsertNewNote.doPost()": {"calls": [["ServletInsertNewNote.doGet()", "M"]], "called_by": [], "class_name": "ServletInsertNewNote", "method_name": "doPost", "params": []}, "ServletShowClassroomManagement.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerClassroom.getClassroomsByAcademicYear()", "M"], ["ManagerClassroom.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowClassroomManagement.doPost()", "M"]], "class_name": "ServletShowClassroomManagement", "method_name": "doGet", "params": []}, "ServletShowClassroomManagement.doPost()": {"calls": [["ServletShowClassroomManagement.doGet()", "M"]], "called_by": [], "class_name": "ServletShowClassroomManagement", "method_name": "doPost", "params": []}, "ServletShowJustifyDetails.doGet()": {"calls": [["ManagerRegister.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerRegister.getJustifyByIdJustify()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowJustifyDetails.doPost()", "M"]], "class_name": "ServletShowJustifyDetails", "method_name": "doGet", "params": []}, "ManagerRegister.getJustifyByIdJustify()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.loadJustifyFromRs()", "O"]], "called_by": [["ServletShowJustifyDetails.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "getJustifyByIdJustify", "params": []}, "ServletShowJustifyDetails.doPost()": {"calls": [["ServletShowJustifyDetails.doGet()", "M"]], "called_by": [], "class_name": "ServletShowJustifyDetails", "method_name": "doPost", "params": []}, "ServletShowJustifyList.doGet()": {"calls": [["ManagerUser.getUserById()", "M"], ["ManagerUser.isDirector()", "M"], ["ManagerRegister.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["Classroom.getAcademicYear()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerRegister.getAbsenceByIDUserAndAcademicYear()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowJustifyList.doPost()", "M"]], "class_name": "ServletShowJustifyList", "method_name": "doGet", "params": []}, "ManagerRegister.getAbsenceByIDUserAndAcademicYear()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.loadAbsenceFromRs()", "O"]], "called_by": [["ServletShowJustifyList.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "getAbsenceByIDUserAndAcademicYear", "params": []}, "ServletShowJustifyList.doPost()": {"calls": [["ServletShowJustifyList.doGet()", "M"]], "called_by": [], "class_name": "ServletShowJustifyList", "method_name": "doPost", "params": []}, "ServletShowNoteDetails.doGet()": {"calls": [["ManagerRegister.getNoteById()", "M"], ["Note.getIdNote()", "M"], ["InvalidValueException.getMessage()", "M"], ["ManagerRegister.updateNote()", "M"], ["Utility.String2Date()", "S"], ["Note.setAcademicYear()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["Note.setIdUser()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["Note.setDateNote()", "M"], ["ManagerRegister.getInstance()", "S"], ["ManagerUser.getInstance()", "S"], ["User.getId()", "M"], ["Note.setDescription()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["Note.setIdNote()", "M"], ["Note.setTeacher()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["Classroom.getAcademicYear()", "M"]], "called_by": [["ServletShowNoteDetails.doPost()", "M"]], "class_name": "ServletShowNoteDetails", "method_name": "doGet", "params": []}, "ManagerRegister.getNoteById()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.loadNoteFromRs()", "O"]], "called_by": [["ServletShowNoteDetails.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "getNoteById", "params": []}, "Note.getIdNote()": {"calls": [], "called_by": [["ServletShowNoteDetails.doGet()", "M"], ["ManagerRegister.updateNote()", "M"], ["ManagerRegister.deleteNote()", "M"]], "class_name": "Note", "method_name": "getIdNote", "params": []}, "Note.setIdNote()": {"calls": [], "called_by": [["ManagerRegister.loadNoteFromRs()", "M"], ["ServletShowNoteDetails.doGet()", "M"], ["TestRegister.main()", "M"], ["ManagerRegister.insertNote()", "M"]], "class_name": "Note", "method_name": "setIdNote", "params": []}, "ManagerRegister.updateNote()": {"calls": [["Note.getIdNote()", "M"], ["Note.getTeacher()", "M"], ["Utility.executeOperation()", "S"], ["Note.getIdUser()", "M"], ["Utility.isNull()", "S"], ["Note.getDateNote()", "M"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Note.getDescription()", "M"], ["Note.getAcademicYear()", "M"]], "called_by": [["ServletShowNoteDetails.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "updateNote", "params": []}, "ServletShowNoteDetails.doPost()": {"calls": [["ServletShowNoteDetails.doGet()", "M"]], "called_by": [], "class_name": "ServletShowNoteDetails", "method_name": "doPost", "params": []}, "ServletShowNoteList.doGet()": {"calls": [["ManagerUser.getUserById()", "M"], ["ManagerUser.isDirector()", "M"], ["ManagerRegister.getInstance()", "S"], ["ManagerRegister.getNoteByIDUserAndAcademicYear()", "M"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["Classroom.getAcademicYear()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowNoteList.doPost()", "M"]], "class_name": "ServletShowNoteList", "method_name": "doGet", "params": []}, "ManagerRegister.getNoteByIDUserAndAcademicYear()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.loadNoteFromRs()", "O"]], "called_by": [["ServletShowNoteList.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "getNoteByIDUserAndAcademicYear", "params": []}, "ServletShowNoteList.doPost()": {"calls": [["ServletShowNoteList.doGet()", "M"]], "called_by": [], "class_name": "ServletShowNoteList", "method_name": "doPost", "params": []}, "ServletShowRegister.doGet()": {"calls": [["ManagerUser.isDirector()", "M"], ["ManagerRegister.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerRegister.getRegisterByClassIDAndDate()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerClassroom.getInstance()", "S"], ["Utility.String2Date()", "S"], ["ManagerClassroom.getClassroomByID()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowRegister.doPost()", "M"]], "class_name": "ServletShowRegister", "method_name": "doGet", "params": []}, "ManagerRegister.getRegisterByClassIDAndDate()": {"calls": [["RegisterLine.setAbsence()", "M"], ["ManagerUser.getStudentsByClassroomId()", "M"], ["RegisterLine.setDelay()", "M"], ["RegisterLine.setStudent()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerRegister.getDelayByIDUserAndDate()", "M"], ["UserListItem.getId()", "M"], ["ManagerRegister.getAbsenceByIDUserAndDate()", "M"]], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ServletShowRegister.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "ManagerRegister", "method_name": "getRegisterByClassIDAndDate", "params": []}, "ServletShowRegister.doPost()": {"calls": [["ServletShowRegister.doGet()", "M"]], "called_by": [], "class_name": "ServletShowRegister", "method_name": "doPost", "params": []}, "ServletUpdateJustify.doGet()": {"calls": [["ManagerRegister.getInstance()", "S"], ["ManagerRegister.updateJustify()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["Justify.setAcademicYear()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerRegister.exists()", "M"], ["Utility.String2Date()", "S"], ["MandatoryFieldException.printStackTrace()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["Justify.setDateJustify()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletUpdateJustify.doPost()", "M"]], "class_name": "ServletUpdateJustify", "method_name": "doGet", "params": []}, "ManagerRegister.updateJustify()": {"calls": [["Justify.getIdUser()", "M"], ["Utility.executeOperation()", "S"], ["Justify.getDateJustify()", "M"], ["Justify.getIdJustify()", "M"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Justify.getAcademicYear()", "M"]], "called_by": [["ServletUpdateJustify.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "updateJustify", "params": []}, "ServletUpdateJustify.doPost()": {"calls": [["ServletUpdateJustify.doGet()", "M"]], "called_by": [], "class_name": "ServletUpdateJustify", "method_name": "doPost", "params": []}, "ServletUpdateRegister.doGet()": {"calls": [["Absence.setIdUser()", "M"], ["RegisterLine.getAbsence()", "M"], ["ManagerRegister.insertDelay()", "M"], ["Delay.setIdUser()", "M"], ["Absence.setDateAbsence()", "M"], ["InvalidValueException.getMessage()", "M"], ["ManagerRegister.getRegisterByClassIDAndDate()", "M"], ["Utility.String2Date()", "S"], ["Delay.setTimeDelay()", "M"], ["ManagerRegister.deleteAbsence()", "M"], ["Delay.setDateDelay()", "M"], ["RegisterLine.getDelay()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["Classroom.getIdClassroom()", "M"], ["ManagerRegister.updateDelay()", "M"], ["ManagerRegister.getInstance()", "S"], ["ManagerUser.getInstance()", "S"], ["ManagerRegister.deleteDelay()", "M"], ["ManagerRegister.hasAbsence()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["UserListItem.getId()", "M"], ["RegisterLine.getStudent()", "M"], ["Absence.setIdJustify()", "M"], ["Absence.setAcademicYear()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["Classroom.getAcademicYear()", "M"], ["ManagerRegister.insertAbsence()", "M"], ["ManagerRegister.hasDelay()", "M"], ["Delay.setAcademicYear()", "M"]], "called_by": [["ServletUpdateRegister.doPost()", "M"]], "class_name": "ServletUpdateRegister", "method_name": "doGet", "params": []}, "Classroom.getIdClassroom()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ServletAssignStudentClassroom.doGet()", "M"], ["ManagerClassroom.delete()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"], ["ManagerClassroom.update()", "M"]], "class_name": "Classroom", "method_name": "getIdClassroom", "params": []}, "RegisterLine.getStudent()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "RegisterLine", "method_name": "getStudent", "params": []}, "UserListItem.getId()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ManagerRegister.getRegisterByClassIDAndDate()", "M"], ["ServletAssignParentStudent.doGet()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletDeleteReport.doGet()", "M"], ["ManagerVotes.getIdVotes()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"]], "class_name": "UserListItem", "method_name": "getId", "params": []}, "ManagerRegister.hasAbsence()": {"calls": [["RegisterLine.getAbsence()", "M"]], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "ManagerRegister", "method_name": "hasAbsence", "params": []}, "Absence.setAcademicYear()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["TestRegister.main()", "M"], ["ManagerRegister.loadAbsenceFromRs()", "M"]], "class_name": "Absence", "method_name": "setAcademicYear", "params": []}, "Absence.setDateAbsence()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["TestRegister.main()", "M"], ["ManagerRegister.loadAbsenceFromRs()", "M"]], "class_name": "Absence", "method_name": "setDateAbsence", "params": []}, "Absence.setIdJustify()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ManagerRegister.insertJustify()", "M"], ["ManagerRegister.loadAbsenceFromRs()", "M"], ["ManagerRegister.deleteJustify()", "M"], ["TestRegister.main()", "M"]], "class_name": "Absence", "method_name": "setIdJustify", "params": []}, "Absence.setIdUser()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["TestRegister.main()", "M"], ["ManagerRegister.loadAbsenceFromRs()", "M"]], "class_name": "Absence", "method_name": "setIdUser", "params": []}, "ManagerRegister.insertAbsence()": {"calls": [["Absence.getAcademicYear()", "M"], ["Absence.getIdJustify()", "M"], ["Utility.getMaxValue()", "S"], ["Absence.setIdAbsence()", "M"], ["Utility.executeOperation()", "S"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Absence.getIdUser()", "M"], ["Absence.getDateAbsence()", "M"]], "called_by": [["ServletUpdateRegister.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "insertAbsence", "params": []}, "RegisterLine.getAbsence()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ManagerRegister.hasAbsence()", "M"]], "class_name": "RegisterLine", "method_name": "getAbsence", "params": []}, "ManagerRegister.deleteAbsence()": {"calls": [["Utility.isNull()", "S"], ["Absence.getIdJustify()", "M"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.deleteJustify()", "M"], ["Utility.executeOperation()", "S"], ["Absence.getIdAbsence()", "M"]], "called_by": [["ServletUpdateRegister.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "deleteAbsence", "params": []}, "ManagerRegister.hasDelay()": {"calls": [["RegisterLine.getDelay()", "M"]], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "ManagerRegister", "method_name": "hasDelay", "params": []}, "Delay.setAcademicYear()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ManagerRegister.loadDelayFromRs()", "M"], ["TestRegister.main()", "M"]], "class_name": "Delay", "method_name": "setAcademicYear", "params": []}, "Delay.setDateDelay()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ManagerRegister.loadDelayFromRs()", "M"], ["TestRegister.main()", "M"]], "class_name": "Delay", "method_name": "setDateDelay", "params": []}, "Delay.setIdUser()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ManagerRegister.loadDelayFromRs()", "M"], ["TestRegister.main()", "M"]], "class_name": "Delay", "method_name": "setIdUser", "params": []}, "Delay.setTimeDelay()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ManagerRegister.loadDelayFromRs()", "M"], ["TestRegister.main()", "M"]], "class_name": "Delay", "method_name": "setTimeDelay", "params": []}, "ManagerRegister.insertDelay()": {"calls": [["Delay.getAcademicYear()", "M"], ["Utility.getMaxValue()", "S"], ["Utility.executeOperation()", "S"], ["Delay.getIdUser()", "M"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Delay.setIdDelay()", "M"], ["Delay.getDateDelay()", "M"], ["Delay.getTimeDelay()", "M"]], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["TestRegister.main()", "M"]], "class_name": "ManagerRegister", "method_name": "insertDelay", "params": []}, "RegisterLine.getDelay()": {"calls": [], "called_by": [["ServletUpdateRegister.doGet()", "M"], ["ManagerRegister.hasDelay()", "M"]], "class_name": "RegisterLine", "method_name": "getDelay", "params": []}, "ManagerRegister.updateDelay()": {"calls": [["Delay.getAcademicYear()", "M"], ["Utility.executeOperation()", "S"], ["Delay.getIdUser()", "M"], ["Delay.getIdDelay()", "M"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Delay.getDateDelay()", "M"], ["Delay.getTimeDelay()", "M"]], "called_by": [["ServletUpdateRegister.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "updateDelay", "params": []}, "ManagerRegister.deleteDelay()": {"calls": [["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Utility.executeOperation()", "S"], ["Delay.getIdDelay()", "M"]], "called_by": [["ServletUpdateRegister.doGet()", "M"]], "class_name": "ManagerRegister", "method_name": "deleteDelay", "params": []}, "ServletUpdateRegister.doPost()": {"calls": [["ServletUpdateRegister.doGet()", "M"]], "called_by": [], "class_name": "ServletUpdateRegister", "method_name": "doPost", "params": []}, "ServletDeleteReport.doGet()": {"calls": [["ManagerVotes.deleteVotesByUserIdYearTurn()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["UserListItem.getId()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerVotes.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletDeleteReport.doPost()", "M"]], "class_name": "ServletDeleteReport", "method_name": "doGet", "params": []}, "ManagerVotes.getInstance()": {"calls": [], "called_by": [["ServletInsertReport.doGet()", "S"], ["ServletUpdateReport.doGet()", "S"], ["ServletShowReports.doGet()", "S"], ["UserTest.main()", "S"], ["ServletLoadReport.doGet()", "S"], ["ServletDeleteReport.doGet()", "S"]], "class_name": "ManagerVotes", "method_name": "getInstance", "params": []}, "ManagerVotes.deleteVotesByUserIdYearTurn()": {"calls": [["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Utility.executeOperation()", "S"]], "called_by": [["ServletDeleteReport.doGet()", "M"]], "class_name": "ManagerVotes", "method_name": "deleteVotesByUserIdYearTurn", "params": []}, "ServletDeleteReport.doPost()": {"calls": [["ServletDeleteReport.doGet()", "M"]], "called_by": [], "class_name": "ServletDeleteReport", "method_name": "doPost", "params": []}, "ServletInsertReport.doGet()": {"calls": [["InvalidValueException.getMessage()", "M"], ["Votes.setId_user()", "M"], ["Classroom.getIdAddress()", "M"], ["ManagerTeaching.getInstance()", "S"], ["ManagerVotes.getInstance()", "S"], ["ManagerTeaching.getTeachingsByClassroomId()", "M"], ["Votes.setTurn()", "M"], ["Votes.setAccademicYear()", "M"], ["Votes.setWritten()", "M"], ["Votes.setLaboratory()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["Votes.setTeaching()", "M"], ["Teaching.getId()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["UserListItem.getId()", "M"], ["Votes.setOral()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerVotes.insert()", "M"]], "called_by": [["ServletInsertReport.doPost()", "M"]], "class_name": "ServletInsertReport", "method_name": "doGet", "params": []}, "Classroom.getIdAddress()": {"calls": [], "called_by": [["ManagerClassroom.exists()", "M"], ["ServletInsertReport.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ServletLoadTeachingList.doGet()", "M"], ["ManagerClassroom.update()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ManagerClassroom.insert()", "M"]], "class_name": "Classroom", "method_name": "getIdAddress", "params": []}, "ManagerTeaching.getTeachingsByClassroomId()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerTeaching.loadRecordsFromRs()", "O"]], "called_by": [["ServletInsertReport.doGet()", "M"], ["ServletLoadReport.doGet()", "M"], ["ServletLoadTeachingList.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ServletShowTeacherTeachingFormByClass.doGet()", "M"]], "class_name": "ManagerTeaching", "method_name": "getTeachingsByClassroomId", "params": []}, "Teaching.getId()": {"calls": [], "called_by": [["ManagerAddress.hasTeaching()", "M"], ["ManagerTeaching.hasTeacher()", "M"], ["ManagerTeaching.update()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ManagerTeaching.delete()", "M"], ["ManagerAddress.removeTeachingAsAddress()", "M"], ["ServletInsertReport.doGet()", "M"], ["ManagerAddress.assignTeachingAsAddress()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ManagerVotes.getIdVotes()", "M"]], "class_name": "Teaching", "method_name": "getId", "params": []}, "Votes.setAccademicYear()": {"calls": [], "called_by": [["ServletInsertReport.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ManagerVotes.loadRecordFromRs()", "M"], ["UserTest.main()", "M"]], "class_name": "Votes", "method_name": "setAccademicYear", "params": []}, "Votes.setId_user()": {"calls": [], "called_by": [["ServletInsertReport.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ManagerVotes.loadRecordFromRs()", "M"], ["UserTest.main()", "M"]], "class_name": "Votes", "method_name": "setId_user", "params": []}, "Votes.setLaboratory()": {"calls": [], "called_by": [["ServletInsertReport.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ManagerVotes.loadRecordFromRs()", "M"], ["UserTest.main()", "M"]], "class_name": "Votes", "method_name": "setLaboratory", "params": []}, "Votes.setOral()": {"calls": [], "called_by": [["ServletInsertReport.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ManagerVotes.loadRecordFromRs()", "M"], ["UserTest.main()", "M"]], "class_name": "Votes", "method_name": "setOral", "params": []}, "Votes.setTeaching()": {"calls": [], "called_by": [["ServletInsertReport.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ManagerVotes.loadRecordFromRs()", "M"], ["UserTest.main()", "M"]], "class_name": "Votes", "method_name": "setTeaching", "params": []}, "Votes.setTurn()": {"calls": [], "called_by": [["ServletInsertReport.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ManagerVotes.loadRecordFromRs()", "M"], ["UserTest.main()", "M"]], "class_name": "Votes", "method_name": "setTurn", "params": []}, "Votes.setWritten()": {"calls": [], "called_by": [["ServletInsertReport.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["ManagerVotes.loadRecordFromRs()", "M"], ["UserTest.main()", "M"]], "class_name": "Votes", "method_name": "setWritten", "params": []}, "ManagerVotes.insert()": {"calls": [["Votes.setId_votes()", "M"], ["Votes.getTeaching()", "M"], ["Utility.getMaxValue()", "S"], ["Votes.getAccademicYear()", "M"], ["Votes.getOral()", "M"], ["Utility.executeOperation()", "S"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Votes.getId_user()", "M"], ["Votes.getTurn()", "M"], ["Votes.getWritten()", "M"], ["Votes.getLaboratory()", "M"]], "called_by": [["ServletInsertReport.doGet()", "M"], ["ServletUpdateReport.doGet()", "M"], ["UserTest.main()", "M"]], "class_name": "ManagerVotes", "method_name": "insert", "params": []}, "ServletInsertReport.doPost()": {"calls": [["ServletInsertReport.doGet()", "M"]], "called_by": [], "class_name": "ServletInsertReport", "method_name": "doPost", "params": []}, "ServletLoadReport.doGet()": {"calls": [["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["Classroom.getIdAddress()", "M"], ["UserListItem.getId()", "M"], ["ManagerTeaching.getInstance()", "S"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerVotes.getVotesByUserIdYearTurn()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerVotes.getInstance()", "S"], ["ManagerTeaching.getTeachingsByClassroomId()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletLoadReport.doPost()", "M"]], "class_name": "ServletLoadReport", "method_name": "doGet", "params": []}, "ManagerVotes.getVotesByUserIdYearTurn()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerVotes.loadRecordsFromRs()", "O"]], "called_by": [["ServletLoadReport.doGet()", "M"], ["ServletShowReports.doGet()", "M"]], "class_name": "ManagerVotes", "method_name": "getVotesByUserIdYearTurn", "params": []}, "ServletLoadReport.doPost()": {"calls": [["ServletLoadReport.doGet()", "M"]], "called_by": [], "class_name": "ServletLoadReport", "method_name": "doPost", "params": []}, "ServletLoadTeachingList.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["Classroom.getIdAddress()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["ManagerTeaching.getTeachingsByClassroomId()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletLoadTeachingList.doPost()", "M"]], "class_name": "ServletLoadTeachingList", "method_name": "doGet", "params": []}, "ServletLoadTeachingList.doPost()": {"calls": [["ServletLoadTeachingList.doGet()", "M"]], "called_by": [], "class_name": "ServletLoadTeachingList", "method_name": "doPost", "params": []}, "ServletShowClassroomByAcademicYear.doGet()": {"calls": [["ManagerUser.isDirector()", "M"], ["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerClassroom.getClassroomsByAcademicYear()", "M"], ["ManagerClassroom.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowClassroomByAcademicYear.doPost()", "M"]], "class_name": "ServletShowClassroomByAcademicYear", "method_name": "doGet", "params": []}, "ServletShowClassroomByAcademicYear.doPost()": {"calls": [["ServletShowClassroomByAcademicYear.doGet()", "M"]], "called_by": [], "class_name": "ServletShowClassroomByAcademicYear", "method_name": "doPost", "params": []}, "ServletShowReports.doGet()": {"calls": [["ManagerUser.getUserById()", "M"], ["UserListItem.setName()", "M"], ["ManagerUser.isDirector()", "M"], ["InvalidValueException.getMessage()", "M"], ["User.getEMail()", "M"], ["UserListItem.setEMail()", "M"], ["User.getName()", "M"], ["User.getId()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerVotes.getVotesByUserIdYearTurn()", "M"], ["UserListItem.setId()", "M"], ["ManagerVotes.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowReports.doPost()", "M"]], "class_name": "ServletShowReports", "method_name": "doGet", "params": []}, "User.getName()": {"calls": [], "called_by": [["ServletShowReports.doGet()", "M"]], "class_name": "User", "method_name": "getName", "params": []}, "UserListItem.setName()": {"calls": [], "called_by": [["ServletShowReports.doGet()", "M"]], "class_name": "UserListItem", "method_name": "setName", "params": []}, "User.getEMail()": {"calls": [], "called_by": [["ServletShowReports.doGet()", "M"]], "class_name": "User", "method_name": "getEMail", "params": []}, "UserListItem.setEMail()": {"calls": [], "called_by": [["ServletShowReports.doGet()", "M"]], "class_name": "UserListItem", "method_name": "setEMail", "params": []}, "UserListItem.setId()": {"calls": [], "called_by": [["ServletShowReports.doGet()", "M"], ["UserTest.main()", "M"]], "class_name": "UserListItem", "method_name": "setId", "params": []}, "ServletShowReports.doPost()": {"calls": [["ServletShowReports.doGet()", "M"]], "called_by": [], "class_name": "ServletShowReports", "method_name": "doPost", "params": []}, "ServletShowStudentsByClass.doGet()": {"calls": [["ManagerUser.isDirector()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerClassroom.getInstance()", "S"], ["ManagerUser.getStudentsByClassroomId()", "M"], ["ManagerClassroom.getClassroomByID()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowStudentsByClass.doPost()", "M"]], "class_name": "ServletShowStudentsByClass", "method_name": "doGet", "params": []}, "ManagerUser.getStudentsByClassroomId()": {"calls": [], "called_by": [["ServletShowStudentsByClass.doGet()", "M"], ["ManagerRegister.getRegisterByClassIDAndDate()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "getStudentsByClassroomId", "params": []}, "ServletShowStudentsByClass.doPost()": {"calls": [["ServletShowStudentsByClass.doGet()", "M"]], "called_by": [], "class_name": "ServletShowStudentsByClass", "method_name": "doPost", "params": []}, "ServletUpdateReport.doGet()": {"calls": [["ManagerVotes.getVotesById()", "M"], ["InvalidValueException.getMessage()", "M"], ["Votes.setId_user()", "M"], ["Classroom.getIdAddress()", "M"], ["ManagerTeaching.getInstance()", "S"], ["ManagerVotes.getIdVotes()", "M"], ["ManagerVotes.getInstance()", "S"], ["ManagerTeaching.getTeachingsByClassroomId()", "M"], ["Votes.setTurn()", "M"], ["Votes.setAccademicYear()", "M"], ["Votes.setWritten()", "M"], ["Votes.setLaboratory()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["Votes.setTeaching()", "M"], ["Teaching.getId()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["UserListItem.getId()", "M"], ["ManagerVotes.delete()", "M"], ["Votes.setOral()", "M"], ["ManagerVotes.update()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerVotes.insert()", "M"]], "called_by": [["ServletUpdateReport.doPost()", "M"]], "class_name": "ServletUpdateReport", "method_name": "doGet", "params": []}, "ManagerVotes.getIdVotes()": {"calls": [["Utility.queryOperation()", "S"], ["UserListItem.getId()", "M"], ["Utility.isNull()", "S"], ["Votes.getId_votes()", "M"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerVotes.loadRecordFromRs()", "O"], ["Teaching.getId()", "M"]], "called_by": [["ServletUpdateReport.doGet()", "M"]], "class_name": "ManagerVotes", "method_name": "getIdVotes", "params": []}, "ManagerVotes.getVotesById()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerVotes.loadRecordFromRs()", "O"]], "called_by": [["ServletUpdateReport.doGet()", "M"]], "class_name": "ManagerVotes", "method_name": "getVotesById", "params": []}, "ManagerVotes.update()": {"calls": [["Votes.getTeaching()", "M"], ["Votes.getAccademicYear()", "M"], ["Votes.getOral()", "M"], ["Utility.executeOperation()", "S"], ["Utility.isNull()", "S"], ["Votes.getId_votes()", "M"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Votes.getId_user()", "M"], ["Votes.getTurn()", "M"], ["Votes.getWritten()", "M"], ["Votes.getLaboratory()", "M"]], "called_by": [["ServletUpdateReport.doGet()", "M"]], "class_name": "ManagerVotes", "method_name": "update", "params": []}, "ManagerVotes.delete()": {"calls": [["Utility.isNull()", "S"], ["Votes.getId_votes()", "M"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Utility.executeOperation()", "S"]], "called_by": [["ServletUpdateReport.doGet()", "M"]], "class_name": "ManagerVotes", "method_name": "delete", "params": []}, "ServletUpdateReport.doPost()": {"calls": [["ServletUpdateReport.doGet()", "M"]], "called_by": [], "class_name": "ServletUpdateReport", "method_name": "doPost", "params": []}, "ServletInitialize.init()": {"calls": [["Utility.setDriverMySql()", "S"], ["Utility.setMaxPoolSize()", "S"], ["Utility.setWaitTimeout()", "S"], ["Utility.setPassword()", "S"], ["Utility.setServerSmtp()", "S"], ["Utility.setFullPathDatabase()", "S"], ["Utility.setPoolTimeout()", "S"], ["Utility.setUserName()", "S"], ["Utility.setTextFooter()", "S"], ["Utility.setActiveTimeout()", "S"]], "called_by": [], "class_name": "ServletInitialize", "method_name": "init", "params": []}, "Utility.setServerSmtp()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setServerSmtp", "params": []}, "Utility.setDriverMySql()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setDriverMySql", "params": []}, "Utility.setFullPathDatabase()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setFullPathDatabase", "params": []}, "Utility.setUserName()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setUserName", "params": []}, "Utility.setPassword()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setPassword", "params": []}, "Utility.setMaxPoolSize()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setMaxPoolSize", "params": []}, "Utility.setWaitTimeout()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setWaitTimeout", "params": []}, "Utility.setActiveTimeout()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setActiveTimeout", "params": []}, "Utility.setPoolTimeout()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setPoolTimeout", "params": []}, "Utility.setTextFooter()": {"calls": [], "called_by": [["ServletInitialize.init()", "S"]], "class_name": "Utility", "method_name": "setTextFooter", "params": []}, "ServletDeleteTeaching.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerTeaching.delete()", "M"], ["ManagerTeaching.getInstance()", "S"], ["MandatoryFieldException.printStackTrace()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletDeleteTeaching.doPost()", "M"]], "class_name": "ServletDeleteTeaching", "method_name": "doGet", "params": []}, "ManagerTeaching.delete()": {"calls": [["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Utility.executeOperation()", "S"], ["Teaching.getId()", "M"]], "called_by": [["ServletDeleteTeaching.doGet()", "M"]], "class_name": "ManagerTeaching", "method_name": "delete", "params": []}, "ServletDeleteTeaching.doPost()": {"calls": [["ServletDeleteTeaching.doGet()", "M"]], "called_by": [], "class_name": "ServletDeleteTeaching", "method_name": "doPost", "params": []}, "ServletInsertTeaching.doGet()": {"calls": [["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["DuplicatedEntityException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["EntityNotFoundException.printStackTrace()", "M"], ["DuplicatedEntityException.getMessage()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["ManagerTeaching.insert()", "M"], ["Teaching.setName()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerTeaching.exists()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletInsertTeaching.doPost()", "M"]], "class_name": "ServletInsertTeaching", "method_name": "doGet", "params": []}, "Teaching.setName()": {"calls": [], "called_by": [["ManagerTeaching.loadRecordFromRs()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"]], "class_name": "Teaching", "method_name": "setName", "params": []}, "ManagerTeaching.exists()": {"calls": [["Utility.isNull()", "S"], ["Teaching.getName()", "M"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"]], "called_by": [["ServletUpdateTeaching.doGet()", "M"], ["ServletInsertTeaching.doGet()", "M"]], "class_name": "ManagerTeaching", "method_name": "exists", "params": []}, "ManagerTeaching.insert()": {"calls": [["Utility.isNull()", "S"], ["Teaching.getName()", "M"], ["Utility.getMaxValue()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Teaching.setId()", "M"], ["Utility.executeOperation()", "S"]], "called_by": [["ServletInsertTeaching.doGet()", "M"]], "class_name": "ManagerTeaching", "method_name": "insert", "params": []}, "ServletInsertTeaching.doPost()": {"calls": [["ServletInsertTeaching.doGet()", "M"]], "called_by": [], "class_name": "ServletInsertTeaching", "method_name": "doPost", "params": []}, "ServletShowTeachingDetails.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["ManagerTeaching.getTeachingById()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowTeachingDetails.doPost()", "M"]], "class_name": "ServletShowTeachingDetails", "method_name": "doGet", "params": []}, "ServletShowTeachingDetails.doPost()": {"calls": [["ServletShowTeachingDetails.doGet()", "M"]], "called_by": [], "class_name": "ServletShowTeachingDetails", "method_name": "doPost", "params": []}, "ServletShowTeachingList.doGet()": {"calls": [["ManagerTeaching.getTeachings()", "M"], ["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowTeachingList.doPost()", "M"]], "class_name": "ServletShowTeachingList", "method_name": "doGet", "params": []}, "ServletShowTeachingList.doPost()": {"calls": [["ServletShowTeachingList.doGet()", "M"]], "called_by": [], "class_name": "ServletShowTeachingList", "method_name": "doPost", "params": []}, "ServletUpdateTeaching.doGet()": {"calls": [["InvalidValueException.getMessage()", "M"], ["ManagerTeaching.getInstance()", "S"], ["ManagerTeaching.getTeachingId()", "M"], ["Teaching.setName()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["Teaching.getId()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["ManagerTeaching.update()", "M"], ["Teaching.setId()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["DuplicatedEntityException.printStackTrace()", "M"], ["DuplicatedEntityException.getMessage()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerTeaching.exists()", "M"]], "called_by": [["ServletUpdateTeaching.doPost()", "M"]], "class_name": "ServletUpdateTeaching", "method_name": "doGet", "params": []}, "Teaching.setId()": {"calls": [], "called_by": [["ManagerTeaching.loadRecordFromRs()", "M"], ["ManagerTeaching.insert()", "M"], ["ServletUpdateTeaching.doGet()", "M"], ["UserTest.main()", "M"]], "class_name": "Teaching", "method_name": "setId", "params": []}, "ManagerTeaching.update()": {"calls": [["Utility.isNull()", "S"], ["Teaching.getName()", "M"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Utility.executeOperation()", "S"], ["Teaching.getId()", "M"]], "called_by": [["ServletUpdateTeaching.doGet()", "M"]], "class_name": "ManagerTeaching", "method_name": "update", "params": []}, "ManagerTeaching.getTeachingId()": {"calls": [["Utility.isNull()", "S"], ["Teaching.getName()", "M"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"]], "called_by": [["ServletUpdateTeaching.doGet()", "M"]], "class_name": "ManagerTeaching", "method_name": "getTeachingId", "params": []}, "ServletUpdateTeaching.doPost()": {"calls": [["ServletUpdateTeaching.doGet()", "M"]], "called_by": [], "class_name": "ServletUpdateTeaching", "method_name": "doPost", "params": []}, "ServletAddTeachingAsTeacher.doGet()": {"calls": [["ManagerUser.getUserById()", "M"], ["ManagerUser.assignTeacherAtClassroomTeaching()", "M"], ["ManagerTeaching.getTeachingById()", "M"], ["User.getId()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerClassroom.getInstance()", "S"], ["ManagerClassroom.getClassroomByID()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.hasTeaching()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletAddTeachingAsTeacher.doPost()", "M"]], "class_name": "ServletAddTeachingAsTeacher", "method_name": "doGet", "params": []}, "ManagerUser.hasTeaching()": {"calls": [], "called_by": [["ServletAddTeachingAsTeacher.doGet()", "M"], ["ServletRemoveTeachingAsTeacher.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "hasTeaching", "params": []}, "ManagerUser.assignTeacherAtClassroomTeaching()": {"calls": [], "called_by": [["ServletAddTeachingAsTeacher.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "assignTeacherAtClassroomTeaching", "params": []}, "ServletAddTeachingAsTeacher.doPost()": {"calls": [["ServletAddTeachingAsTeacher.doGet()", "M"]], "called_by": [], "class_name": "ServletAddTeachingAsTeacher", "method_name": "doPost", "params": []}, "ServletAlterPersonalDate.doGet()": {"calls": [["ManagerUser.getUserId()", "M"], ["User.setPassword()", "M"], ["ManagerUser.update()", "M"], ["ManagerUser.exists()", "M"], ["ManagerUser.existsLogin()", "M"], ["User.getId()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["DuplicatedEntityException.printStackTrace()", "M"], ["DuplicatedEntityException.getMessage()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletAlterPersonalDate.doPost()", "M"]], "class_name": "ServletAlterPersonalDate", "method_name": "doGet", "params": []}, "ManagerUser.existsLogin()": {"calls": [], "called_by": [["ServletAlterPersonalDate.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "existsLogin", "params": []}, "User.setPassword()": {"calls": [], "called_by": [["ServletAlterPersonalDate.doGet()", "M"], ["ServletInsertUser.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"]], "class_name": "User", "method_name": "setPassword", "params": []}, "ManagerUser.exists()": {"calls": [], "called_by": [["ManagerClassroom.getClassroomsByTeacher()", "M"], ["ManagerClassroom.getClassroomsByStudent()", "M"], ["ServletUpdateUser.doGet()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletInsertUser.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "exists", "params": []}, "ManagerUser.update()": {"calls": [], "called_by": [["ServletAlterPersonalDate.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "update", "params": []}, "ManagerUser.getUserId()": {"calls": [], "called_by": [["ManagerClassroom.getClassroomsByStudent()", "M"], ["ManagerClassroom.getClassroomsByTeacher()", "M"], ["ServletAlterPersonalDate.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "getUserId", "params": []}, "ServletAlterPersonalDate.doPost()": {"calls": [["ServletAlterPersonalDate.doGet()", "M"]], "called_by": [], "class_name": "ServletAlterPersonalDate", "method_name": "doPost", "params": []}, "ServletAssignParentStudent.doGet()": {"calls": [["ManagerUser.getUserById()", "M"], ["ManagerUser.removeParent()", "M"], ["InvalidValueException.getMessage()", "M"], ["User.getId()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["UserListItem.getId()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.assignParent()", "M"], ["ManagerUser.getStudents()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletAssignParentStudent.doPost()", "M"]], "class_name": "ServletAssignParentStudent", "method_name": "doGet", "params": []}, "ManagerUser.getStudents()": {"calls": [], "called_by": [["ServletAssignParentStudent.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "getStudents", "params": []}, "ManagerUser.assignParent()": {"calls": [], "called_by": [["ServletAssignParentStudent.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "assignParent", "params": []}, "ManagerUser.removeParent()": {"calls": [], "called_by": [["ServletAssignParentStudent.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "removeParent", "params": []}, "ServletAssignParentStudent.doPost()": {"calls": [["ServletAssignParentStudent.doGet()", "M"]], "called_by": [], "class_name": "ServletAssignParentStudent", "method_name": "doPost", "params": []}, "ServletAssignRole.doGet()": {"calls": [["ManagerUser.getAdministrators()", "M"], ["ManagerUser.removeRole()", "M"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["DeleteManagerException.printStackTrace()", "M"], ["DeleteManagerException.getMessage()", "M"], ["ManagerUser.assignRole()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletAssignRole.doPost()", "M"]], "class_name": "ServletAssignRole", "method_name": "doGet", "params": []}, "ManagerUser.getAdministrators()": {"calls": [], "called_by": [["ServletDeleteUser.doGet()", "M"], ["ServletAssignRole.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "getAdministrators", "params": []}, "ManagerUser.assignRole()": {"calls": [], "called_by": [["ServletAssignRole.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "assignRole", "params": []}, "ManagerUser.removeRole()": {"calls": [], "called_by": [["ServletAssignRole.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "removeRole", "params": []}, "DeleteManagerException.getMessage()": {"calls": [], "called_by": [["ServletAssignRole.doGet()", "M"]], "class_name": "DeleteManagerException", "method_name": "getMessage", "params": []}, "DeleteManagerException.printStackTrace()": {"calls": [], "called_by": [["ServletAssignRole.doGet()", "M"]], "class_name": "DeleteManagerException", "method_name": "printStackTrace", "params": []}, "ServletAssignRole.doPost()": {"calls": [["ServletAssignRole.doGet()", "M"]], "called_by": [], "class_name": "ServletAssignRole", "method_name": "doPost", "params": []}, "ServletAssignStudentClassroom.doGet()": {"calls": [["ManagerClassroom.getClassroomByUserAcademicYear()", "M"], ["Classroom.getIdClassroom()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerClassroom.getInstance()", "S"], ["MandatoryFieldException.printStackTrace()", "M"], ["ManagerUser.assignStudentClassroom()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["ManagerUser.removeStudentClassroom()", "M"]], "called_by": [["ServletAssignStudentClassroom.doPost()", "M"]], "class_name": "ServletAssignStudentClassroom", "method_name": "doGet", "params": []}, "ManagerClassroom.getClassroomByUserAcademicYear()": {"calls": [["ManagerClassroom.getInstance()", "S"], ["ManagerClassroom.getClassroomsByStudent()", "M"], ["Classroom.getAcademicYear()", "M"]], "called_by": [["ServletAssignStudentClassroom.doGet()", "M"]], "class_name": "ManagerClassroom", "method_name": "getClassroomByUserAcademicYear", "params": []}, "ManagerUser.removeStudentClassroom()": {"calls": [], "called_by": [["ServletAssignStudentClassroom.doGet()", "M"], ["ServletRemoveStudentClassroom.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "removeStudentClassroom", "params": []}, "ManagerUser.assignStudentClassroom()": {"calls": [], "called_by": [["ServletAssignStudentClassroom.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "assignStudentClassroom", "params": []}, "ServletAssignStudentClassroom.doPost()": {"calls": [["ServletAssignStudentClassroom.doGet()", "M"]], "called_by": [], "class_name": "ServletAssignStudentClassroom", "method_name": "doPost", "params": []}, "ServletDeleteUser.doGet()": {"calls": [["ManagerUser.getAdministrators()", "M"], ["ManagerUser.delete()", "M"], ["DeleteAdministratorException.printStackTrace()", "M"], ["InvalidValueException.getMessage()", "M"], ["DeleteAdministratorException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletDeleteUser.doPost()", "M"]], "class_name": "ServletDeleteUser", "method_name": "doGet", "params": []}, "ManagerUser.delete()": {"calls": [], "called_by": [["ServletDeleteUser.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "delete", "params": []}, "DeleteAdministratorException.getMessage()": {"calls": [], "called_by": [["ServletDeleteUser.doGet()", "M"]], "class_name": "DeleteAdministratorException", "method_name": "getMessage", "params": []}, "DeleteAdministratorException.printStackTrace()": {"calls": [], "called_by": [["ServletDeleteUser.doGet()", "M"]], "class_name": "DeleteAdministratorException", "method_name": "printStackTrace", "params": []}, "ServletDeleteUser.doPost()": {"calls": [["ServletDeleteUser.doGet()", "M"]], "called_by": [], "class_name": "ServletDeleteUser", "method_name": "doPost", "params": []}, "ServletInsertUser.doGet()": {"calls": [["User.setPassword()", "M"], ["ManagerUser.existsLogin()", "M"], ["InvalidValueException.getMessage()", "M"], ["LoginException.printStackTrace()", "M"], ["User.setCell()", "M"], ["User.setEMail()", "M"], ["User.setFirstName()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["ManagerUser.insert()", "M"], ["LoginException.getMessage()", "M"], ["User.setLastName()", "M"], ["ManagerUser.exists()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["DuplicatedEntityException.printStackTrace()", "M"], ["User.setLogin()", "M"], ["DuplicatedEntityException.getMessage()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["ManagerUser.getInstance()", "S"]], "called_by": [["ServletInsertUser.doPost()", "M"]], "class_name": "ServletInsertUser", "method_name": "doGet", "params": []}, "User.setFirstName()": {"calls": [], "called_by": [["ServletInsertUser.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"]], "class_name": "User", "method_name": "setFirstName", "params": []}, "User.setLastName()": {"calls": [], "called_by": [["ServletInsertUser.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"]], "class_name": "User", "method_name": "setLastName", "params": []}, "User.setCell()": {"calls": [], "called_by": [["ServletInsertUser.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"]], "class_name": "User", "method_name": "setCell", "params": []}, "User.setEMail()": {"calls": [], "called_by": [["ServletInsertUser.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"]], "class_name": "User", "method_name": "setEMail", "params": []}, "User.setLogin()": {"calls": [], "called_by": [["ServletInsertUser.doGet()", "M"], ["ServletUpdateUser.doGet()", "M"]], "class_name": "User", "method_name": "setLogin", "params": []}, "ManagerUser.insert()": {"calls": [], "called_by": [["ServletInsertUser.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "insert", "params": []}, "LoginException.getMessage()": {"calls": [], "called_by": [["ServletLogin.doGet()", "M"], ["ServletInsertUser.doGet()", "M"]], "class_name": "LoginException", "method_name": "getMessage", "params": []}, "LoginException.printStackTrace()": {"calls": [], "called_by": [["ServletLogin.doGet()", "M"], ["ServletInsertUser.doGet()", "M"]], "class_name": "LoginException", "method_name": "printStackTrace", "params": []}, "ServletInsertUser.doPost()": {"calls": [["ServletInsertUser.doGet()", "M"]], "called_by": [], "class_name": "ServletInsertUser", "method_name": "doPost", "params": []}, "ServletLoadClassByAccademicYear.doGet()": {"calls": [["ManagerUser.isDirector()", "M"], ["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerClassroom.getClassroomsByAcademicYear()", "M"], ["ManagerClassroom.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletLoadClassByAccademicYear.doPost()", "M"]], "class_name": "ServletLoadClassByAccademicYear", "method_name": "doGet", "params": []}, "ServletLoadClassByAccademicYear.doPost()": {"calls": [["ServletLoadClassByAccademicYear.doGet()", "M"]], "called_by": [], "class_name": "ServletLoadClassByAccademicYear", "method_name": "doPost", "params": []}, "ServletLoadYear.doGet()": {"calls": [["ManagerUser.isDirector()", "M"], ["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["ManagerClassroom.getInstance()", "S"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["ManagerClassroom.getAcademicYearList()", "M"]], "called_by": [["ServletLoadYear.doPost()", "M"]], "class_name": "ServletLoadYear", "method_name": "doGet", "params": []}, "ServletLoadYear.doPost()": {"calls": [["ServletLoadYear.doGet()", "M"]], "called_by": [], "class_name": "ServletLoadYear", "method_name": "doPost", "params": []}, "ServletLogin.doGet()": {"calls": [["LoginException.getMessage()", "M"], ["ManagerUser.isDirector()", "M"], ["InvalidValueException.getMessage()", "M"], ["LoginException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerUser.isAtaPeople()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isTeacher()", "M"], ["ManagerUser.login()", "M"], ["ManagerUser.isParent()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.getUserByLogin()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["ManagerUser.isStudent()", "M"]], "called_by": [["ServletLogin.doPost()", "M"]], "class_name": "ServletLogin", "method_name": "doGet", "params": []}, "ManagerUser.getUserByLogin()": {"calls": [], "called_by": [["ServletLogin.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "getUserByLogin", "params": []}, "ManagerUser.login()": {"calls": [], "called_by": [["ServletLogin.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "login", "params": []}, "ManagerUser.isTeacher()": {"calls": [], "called_by": [["ServletLogin.doGet()", "M"], ["ManagerClassroom.getClassroomsByTeacher()", "M"], ["ServletShowUserTeachingForm.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "isTeacher", "params": []}, "ManagerUser.isStudent()": {"calls": [], "called_by": [["ServletLogin.doGet()", "M"], ["ManagerClassroom.getClassroomsByStudent()", "M"], ["ServletShowUserRoleForm.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "isStudent", "params": []}, "ManagerUser.isParent()": {"calls": [], "called_by": [["ServletLogin.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "isParent", "params": []}, "ManagerUser.isAtaPeople()": {"calls": [], "called_by": [["ServletLogin.doGet()", "M"], ["ServletShowUserRoleForm.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "isAtaPeople", "params": []}, "ServletLogin.doPost()": {"calls": [["ServletLogin.doGet()", "M"]], "called_by": [], "class_name": "ServletLogin", "method_name": "doPost", "params": []}, "ServletLogout.doPost()": {"calls": [["ServletLogout.doGet()", "M"]], "called_by": [], "class_name": "ServletLogout", "method_name": "doPost", "params": []}, "ServletLogout.doGet()": {"calls": [], "called_by": [["ServletLogout.doPost()", "M"]], "class_name": "ServletLogout", "method_name": "doGet", "params": []}, "ServletRemoveStudentClassroom.doGet()": {"calls": [["Classroom.getIdClassroom()", "M"], ["InvalidValueException.getMessage()", "M"], ["User.getId()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["UserListItem.getId()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerClassroom.getInstance()", "S"], ["ManagerUser.getStudentsByClassroomId()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["ManagerUser.removeStudentClassroom()", "M"]], "called_by": [["ServletRemoveStudentClassroom.doPost()", "M"]], "class_name": "ServletRemoveStudentClassroom", "method_name": "doGet", "params": []}, "ServletRemoveStudentClassroom.doPost()": {"calls": [["ServletRemoveStudentClassroom.doGet()", "M"]], "called_by": [], "class_name": "ServletRemoveStudentClassroom", "method_name": "doPost", "params": []}, "ServletRemoveTeachingAsTeacher.doGet()": {"calls": [["ManagerUser.getUserById()", "M"], ["ManagerTeaching.getTeachingById()", "M"], ["User.getId()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerClassroom.getInstance()", "S"], ["ManagerUser.removeTeacherAtClassroomTeaching()", "M"], ["ManagerClassroom.getClassroomByID()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.hasTeaching()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletRemoveTeachingAsTeacher.doPost()", "M"]], "class_name": "ServletRemoveTeachingAsTeacher", "method_name": "doGet", "params": []}, "ManagerUser.removeTeacherAtClassroomTeaching()": {"calls": [], "called_by": [["ServletRemoveTeachingAsTeacher.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "removeTeacherAtClassroomTeaching", "params": []}, "ServletRemoveTeachingAsTeacher.doPost()": {"calls": [["ServletRemoveTeachingAsTeacher.doGet()", "M"]], "called_by": [], "class_name": "ServletRemoveTeachingAsTeacher", "method_name": "doPost", "params": []}, "ServletReportTeachings.doGet()": {"calls": [["ManagerClassroom.getClassroomsByTeacherAcademicYear()", "M"], ["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["ManagerClassroom.getInstance()", "S"], ["MandatoryFieldException.printStackTrace()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletReportTeachings.doPost()", "M"]], "class_name": "ServletReportTeachings", "method_name": "doGet", "params": []}, "ManagerClassroom.getClassroomsByTeacherAcademicYear()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerClassroom.loadRecordsFromRs()", "O"], ["User.getId()", "M"]], "called_by": [["ServletReportTeachings.doGet()", "M"]], "class_name": "ManagerClassroom", "method_name": "getClassroomsByTeacherAcademicYear", "params": []}, "ServletReportTeachings.doPost()": {"calls": [["ServletReportTeachings.doGet()", "M"]], "called_by": [], "class_name": "ServletReportTeachings", "method_name": "doPost", "params": []}, "ServletShowTeacherTeachingFormByClass.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerTeaching.getInstance()", "S"], ["ManagerClassroom.getInstance()", "S"], ["ManagerTeaching.getTeachingsByClassroomId()", "M"], ["ManagerClassroom.getClassroomByID()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowTeacherTeachingFormByClass.doPost()", "M"]], "class_name": "ServletShowTeacherTeachingFormByClass", "method_name": "doGet", "params": []}, "ServletShowTeacherTeachingFormByClass.doPost()": {"calls": [["ServletShowTeacherTeachingFormByClass.doGet()", "M"]], "called_by": [], "class_name": "ServletShowTeacherTeachingFormByClass", "method_name": "doPost", "params": []}, "ServletShowUserDetails.doGet()": {"calls": [["ManagerUser.getUserById()", "M"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowUserDetails.doPost()", "M"]], "class_name": "ServletShowUserDetails", "method_name": "doGet", "params": []}, "ServletShowUserDetails.doPost()": {"calls": [["ServletShowUserDetails.doGet()", "M"]], "called_by": [], "class_name": "ServletShowUserDetails", "method_name": "doPost", "params": []}, "ServletShowUserList.doGet()": {"calls": [["ManagerUser.getUserList()", "M"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"]], "called_by": [["ServletShowUserList.doPost()", "M"]], "class_name": "ServletShowUserList", "method_name": "doGet", "params": []}, "ManagerUser.getUserList()": {"calls": [], "called_by": [["ServletShowUserList.doGet()", "M"]], "class_name": "ManagerUser", "method_name": "getUserList", "params": []}, "ServletShowUserList.doPost()": {"calls": [["ServletShowUserList.doGet()", "M"]], "called_by": [], "class_name": "ServletShowUserList", "method_name": "doPost", "params": []}, "ServletShowUserRoleForm.doGet()": {"calls": [["ManagerUser.isDirector()", "M"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["ManagerUser.isAtaPeople()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isTeacher()", "M"], ["Utility.BooleanToInt()", "S"], ["ManagerUser.isParent()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["ManagerUser.isStudent()", "M"]], "called_by": [["ServletShowUserRoleForm.doPost()", "M"]], "class_name": "ServletShowUserRoleForm", "method_name": "doGet", "params": []}, "Utility.BooleanToInt()": {"calls": [], "called_by": [["ServletShowUserRoleForm.doGet()", "S"]], "class_name": "Utility", "method_name": "BooleanToInt", "params": []}, "ServletShowUserRoleForm.doPost()": {"calls": [["ServletShowUserRoleForm.doGet()", "M"]], "called_by": [], "class_name": "ServletShowUserRoleForm", "method_name": "doPost", "params": []}, "ServletShowUserTeachingForm.doGet()": {"calls": [["ManagerUser.getInstance()", "S"], ["InvalidValueException.getMessage()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["ManagerClassroom.getInstance()", "S"], ["ManagerUser.isTeacher()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["ManagerClassroom.getClassroomsByTeacher()", "M"]], "called_by": [["ServletShowUserTeachingForm.doPost()", "M"]], "class_name": "ServletShowUserTeachingForm", "method_name": "doGet", "params": []}, "ManagerClassroom.getClassroomsByTeacher()": {"calls": [["Utility.queryOperation()", "S"], ["ManagerUser.getUserId()", "M"], ["ManagerUser.exists()", "M"], ["ManagerClassroom.loadRecordsFromRs()", "O"], ["Utility.isNull()", "S"], ["ManagerUser.isTeacher()", "M"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerUser.getInstance()", "S"]], "called_by": [["ServletShowUserTeachingForm.doGet()", "M"]], "class_name": "ManagerClassroom", "method_name": "getClassroomsByTeacher", "params": []}, "ServletShowUserTeachingForm.doPost()": {"calls": [["ServletShowUserTeachingForm.doGet()", "M"]], "called_by": [], "class_name": "ServletShowUserTeachingForm", "method_name": "doPost", "params": []}, "ServletUpdateUser.doGet()": {"calls": [["ManagerUser.getUserId()", "M"], ["User.setPassword()", "M"], ["ManagerUser.existsLogin()", "M"], ["InvalidValueException.getMessage()", "M"], ["User.setCell()", "M"], ["User.setEMail()", "M"], ["User.setFirstName()", "M"], ["InvalidValueException.printStackTrace()", "M"], ["EntityNotFoundException.printStackTrace()", "M"], ["ManagerUser.isAdministrator()", "M"], ["EntityNotFoundException.getMessage()", "M"], ["MandatoryFieldException.printStackTrace()", "M"], ["User.setLastName()", "M"], ["ManagerUser.update()", "M"], ["ManagerUser.exists()", "M"], ["User.getId()", "M"], ["ConnectionException.getMessage()", "M"], ["ConnectionException.printStackTrace()", "M"], ["DuplicatedEntityException.printStackTrace()", "M"], ["User.setLogin()", "M"], ["DuplicatedEntityException.getMessage()", "M"], ["MandatoryFieldException.getMessage()", "M"], ["ManagerUser.getInstance()", "S"]], "called_by": [["ServletUpdateUser.doPost()", "M"]], "class_name": "ServletUpdateUser", "method_name": "doGet", "params": []}, "ServletUpdateUser.doPost()": {"calls": [["ServletUpdateUser.doGet()", "M"]], "called_by": [], "class_name": "ServletUpdateUser", "method_name": "doPost", "params": []}, "Report.ToString()": {"calls": [["Votes.toString()", "M"]], "called_by": [], "class_name": "Report", "method_name": "ToString", "params": []}, "Votes.toString()": {"calls": [], "called_by": [["Report.ToString()", "M"]], "class_name": "Votes", "method_name": "toString", "params": []}, "User.toString()": {"calls": [["User.getLastName()", "M"], ["User.getFirstName()", "M"]], "called_by": [], "class_name": "User", "method_name": "toString", "params": []}, "User.getFirstName()": {"calls": [], "called_by": [["User.toString()", "M"]], "class_name": "User", "method_name": "getFirstName", "params": []}, "User.getLastName()": {"calls": [], "called_by": [["User.toString()", "M"]], "class_name": "User", "method_name": "getLastName", "params": []}, "ConnectionPoolDataSource.clearActive()": {"calls": [["ConnectionPoolDataSource.release()", "M"]], "called_by": [["ControlConnection.run()", "M"]], "class_name": "ConnectionPoolDataSource", "method_name": "clearActive", "params": []}, "ConnectionPoolDataSource.release()": {"calls": [], "called_by": [["DBConnection.releaseConnection()", "M"], ["ConnectionPoolDataSource.clearActive()", "M"], ["ControlConnection.run()", "M"], ["ConnectionWrapper.close()", "M"]], "class_name": "ConnectionPoolDataSource", "method_name": "release", "params": []}, "ConnectionPoolDataSource.closeAllConnections()": {"calls": [["ConnectionWrapper.closeWrappedConnection()", "M"], ["ConnectionPoolDataSource.closeAllConnections()", "O"]], "called_by": [["ConnectionPoolDataSource.closeAllConnections()", "O"], ["ConnectionPoolDataSource.closeAllPooledConnections()", "O"], ["ConnectionPoolDataSource.access$1()", "O"]], "class_name": "ConnectionPoolDataSource", "method_name": "closeAllConnections", "params": []}, "ConnectionWrapper.closeWrappedConnection()": {"calls": [["ConnectionWrapper.closeAndReleaseStatements()", "O"]], "called_by": [["ConnectionPoolDataSource.closeAllConnections()", "M"], ["ConnectionWrapper.finalize()", "M"]], "class_name": "ConnectionWrapper", "method_name": "closeWrappedConnection", "params": []}, "ConnectionPoolDataSource.closeAllPooledConnections()": {"calls": [["ConnectionPoolDataSource.closeAllConnections()", "O"]], "called_by": [["ControlConnection.run()", "M"]], "class_name": "ConnectionPoolDataSource", "method_name": "closeAllPooledConnections", "params": []}, "ConnectionPoolDataSource.getConnection()": {"calls": [["ConnectionPoolDataSource.getPooledConnection()", "O"], ["ConnectionPoolDataSource.createNewConnection()", "O"]], "called_by": [["DBConnection.getConnection()", "M"], ["ControlConnection.run()", "M"]], "class_name": "ConnectionPoolDataSource", "method_name": "getConnection", "params": []}, "ConnectionPoolDataSource.getPooledConnection()": {"calls": [], "called_by": [["ConnectionPoolDataSource.getConnection()", "O"]], "class_name": "ConnectionPoolDataSource", "method_name": "getPooledConnection", "params": []}, "ConnectionPoolDataSource.createNewConnection()": {"calls": [], "called_by": [["ConnectionPoolDataSource.getConnection()", "O"]], "class_name": "ConnectionPoolDataSource", "method_name": "createNewConnection", "params": []}, "ConnectionPoolDataSource.toString()": {"calls": [["ConnectionPoolDataSource.poolSize()", "M"], ["ConnectionPoolDataSource.activeSize()", "M"]], "called_by": [], "class_name": "ConnectionPoolDataSource", "method_name": "toString", "params": []}, "ConnectionPoolDataSource.activeSize()": {"calls": [], "called_by": [["ConnectionPoolDataSource.toString()", "M"], ["ControlConnection.run()", "M"]], "class_name": "ConnectionPoolDataSource", "method_name": "activeSize", "params": []}, "ConnectionPoolDataSource.poolSize()": {"calls": [], "called_by": [["ConnectionPoolDataSource.toString()", "M"]], "class_name": "ConnectionPoolDataSource", "method_name": "poolSize", "params": []}, "ConnectionPoolDataSource.access$1()": {"calls": [["ConnectionPoolDataSource.closeAllConnections()", "O"]], "called_by": [], "class_name": "ConnectionPoolDataSource", "method_name": "access$1", "params": []}, "ConnectionWrapper.cachePreparedStatement()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [["ConnectionWrapper.prepareStatement()", "O"]], "class_name": "ConnectionWrapper", "method_name": "cachePreparedStatement", "params": []}, "ConnectionPoolDataSource.setLastTime()": {"calls": [], "called_by": [["ConnectionWrapper.getTypeMap()", "M"], ["ConnectionWrapper.isReadOnly()", "M"], ["ConnectionWrapper.createStatement()", "M"], ["ConnectionWrapper.prepareCall()", "M"], ["ConnectionWrapper.setReadOnly()", "M"], ["ConnectionWrapper.getWarnings()", "M"], ["ConnectionWrapper.getAutoCommit()", "M"], ["ConnectionWrapper.releaseSavepoint()", "M"], ["ConnectionWrapper.getMetaData()", "M"], ["ConnectionWrapper.commit()", "M"], ["ConnectionWrapper.setAutoCommit()", "M"], ["ConnectionWrapper.setSavepoint()", "M"], ["ConnectionWrapper.getCatalog()", "M"], ["ConnectionWrapper.setCatalog()", "M"], ["ConnectionWrapper.cacheStatement()", "M"], ["ConnectionWrapper.isClosed()", "M"], ["ConnectionWrapper.prepareStatement()", "M"], ["ConnectionWrapper.getTransactionIsolation()", "M"], ["ConnectionWrapper.rollback()", "M"], ["ConnectionWrapper.setHoldability()", "M"], ["ConnectionWrapper.setTransactionIsolation()", "M"], ["ConnectionWrapper.cachePreparedStatement()", "M"], ["ConnectionWrapper.getHoldability()", "M"], ["ConnectionWrapper.nativeSQL()", "M"]], "class_name": "ConnectionPoolDataSource", "method_name": "setLastTime", "params": []}, "ConnectionWrapper.cacheStatement()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [["ConnectionWrapper.createStatement()", "O"]], "class_name": "ConnectionWrapper", "method_name": "cacheStatement", "params": []}, "ConnectionWrapper.close()": {"calls": [["ConnectionWrapper.closeAndReleaseStatements()", "O"], ["ConnectionPoolDataSource.release()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "close", "params": []}, "ConnectionWrapper.closeAndReleaseStatements()": {"calls": [], "called_by": [["ConnectionWrapper.close()", "O"], ["ConnectionWrapper.closeWrappedConnection()", "O"]], "class_name": "ConnectionWrapper", "method_name": "closeAndReleaseStatements", "params": []}, "ConnectionWrapper.commit()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "commit", "params": []}, "ConnectionWrapper.createStatement()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"], ["ConnectionWrapper.cacheStatement()", "O"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "createStatement", "params": []}, "ConnectionWrapper.finalize()": {"calls": [["ConnectionWrapper.closeWrappedConnection()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "finalize", "params": []}, "ConnectionWrapper.getAutoCommit()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getAutoCommit", "params": []}, "ConnectionWrapper.getCatalog()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getCatalog", "params": []}, "ConnectionWrapper.getHoldability()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getHoldability", "params": []}, "ConnectionWrapper.getMetaData()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getMetaData", "params": []}, "ConnectionWrapper.getTransactionIsolation()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getTransactionIsolation", "params": []}, "ConnectionWrapper.getTypeMap()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getTypeMap", "params": []}, "ConnectionWrapper.getWarnings()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "getWarnings", "params": []}, "ConnectionWrapper.isClosed()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "isClosed", "params": []}, "ConnectionWrapper.isReadOnly()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "isReadOnly", "params": []}, "ConnectionWrapper.nativeSQL()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "nativeSQL", "params": []}, "ConnectionWrapper.prepareCall()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareCall", "params": []}, "ConnectionWrapper.prepareStatement()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"], ["ConnectionWrapper.cachePreparedStatement()", "O"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "prepareStatement", "params": []}, "ConnectionWrapper.releaseSavepoint()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "releaseSavepoint", "params": []}, "ConnectionWrapper.rollback()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "rollback", "params": []}, "ConnectionWrapper.setAutoCommit()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setAutoCommit", "params": []}, "ConnectionWrapper.setCatalog()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setCatalog", "params": []}, "ConnectionWrapper.setHoldability()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setHoldability", "params": []}, "ConnectionWrapper.setReadOnly()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setReadOnly", "params": []}, "ConnectionWrapper.setSavepoint()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setSavepoint", "params": []}, "ConnectionWrapper.setTransactionIsolation()": {"calls": [["ConnectionPoolDataSource.setLastTime()", "M"]], "called_by": [], "class_name": "ConnectionWrapper", "method_name": "setTransactionIsolation", "params": []}, "ControlConnection.run()": {"calls": [["ConnectionPoolDataSource.getConnection()", "M"], ["ConnectionPoolDataSource.release()", "M"], ["ConnectionPoolDataSource.clearActive()", "M"], ["ConnectionPoolDataSource.closeAllPooledConnections()", "M"], ["ControlConnection.setPriority()", "M"], ["ConnectionPoolDataSource.activeSize()", "M"]], "called_by": [], "class_name": "ControlConnection", "method_name": "run", "params": []}, "ControlConnection.setPriority()": {"calls": [], "called_by": [["ControlConnection.run()", "M"]], "class_name": "ControlConnection", "method_name": "setPriority", "params": []}, "DBConnection.<clinit>()": {"calls": [["Utility.getWaitTimeout()", "S"], ["Utility.getDriverMySql()", "S"], ["Utility.getPassword()", "S"], ["DBConnection.loadPool()", "S"], ["Utility.getActiveTimeout()", "S"], ["Utility.getUserName()", "S"], ["Utility.getMaxPoolSize()", "S"], ["Utility.getPoolTimeout()", "S"], ["Utility.getFullPathDatabase()", "S"], ["Environment.getPoolPropertiesPath()", "S"]], "called_by": [], "class_name": "DBConnection", "method_name": "<clinit>", "params": []}, "Environment.getPoolPropertiesPath()": {"calls": [], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "Environment", "method_name": "getPoolPropertiesPath", "params": []}, "Utility.getDriverMySql()": {"calls": [], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "Utility", "method_name": "getDriverMySql", "params": []}, "Utility.getFullPathDatabase()": {"calls": [], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "Utility", "method_name": "getFullPathDatabase", "params": []}, "Utility.getUserName()": {"calls": [], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "Utility", "method_name": "getUserName", "params": []}, "Utility.getPassword()": {"calls": [], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "Utility", "method_name": "getPassword", "params": []}, "Utility.getMaxPoolSize()": {"calls": [], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "Utility", "method_name": "getMaxPoolSize", "params": []}, "Utility.getWaitTimeout()": {"calls": [], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "Utility", "method_name": "getWaitTimeout", "params": []}, "Utility.getActiveTimeout()": {"calls": [], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "Utility", "method_name": "getActiveTimeout", "params": []}, "Utility.getPoolTimeout()": {"calls": [], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "Utility", "method_name": "getPoolTimeout", "params": []}, "DBConnection.loadPool()": {"calls": [["ControlConnection.start()", "M"], ["ConnectionPoolDataSource.setActivedTimeout()", "M"]], "called_by": [["DBConnection.<clinit>()", "S"]], "class_name": "DBConnection", "method_name": "loadPool", "params": []}, "DBConnection.getConnection()": {"calls": [["ConnectionPoolDataSource.getConnection()", "M"]], "called_by": [["ManagerRegister.getNoteByIDUserAndAcademicYear()", "S"], ["Utility.getMaxValue()", "S"], ["ManagerAddress.exists()", "S"], ["ManagerAddress.getAddressList()", "S"], ["ManagerTeaching.getTeachingsByIdUserIdClassroom()", "S"], ["ManagerRegister.getAbsenceByIDUserAndAcademicYear()", "S"], ["ManagerRegister.exists()", "S"], ["ManagerTeaching.getTeachingNameById()", "S"], ["ManagerTeaching.getTeachingsByUserId()", "S"], ["ManagerVotes.delete()", "S"], ["ManagerTeaching.exists()", "S"], ["ManagerVotes.getVotes()", "S"], ["ManagerRegister.insertJustify()", "S"], ["ManagerAddress.hasTeaching()", "S"], ["ManagerClassroom.update()", "S"], ["ManagerTeaching.getTeachingId()", "S"], ["ManagerVotes.insert()", "S"], ["ManagerClassroom.exists()", "S"], ["ManagerRegister.insertDelay()", "S"], ["ManagerRegister.getDelayById()", "S"], ["ManagerRegister.getJustifyByIdJustify()", "S"], ["ManagerVotes.exists()", "S"], ["ManagerVotes.getVotesByUserIdYearTurn()", "S"], ["ManagerAddress.removeTeachingAsAddress()", "S"], ["ManagerTeaching.getTeachingsByClassroomName()", "S"], ["ManagerTeaching.insert()", "S"], ["ManagerRegister.getAbsenceByIdAbsence()", "S"], ["ManagerTeaching.hasTeacher()", "S"], ["ManagerClassroom.getClassroomsByTeacherAcademicYear()", "S"], ["ManagerRegister.updateDelay()", "S"], ["ManagerClassroom.getClassroomsByStudent()", "S"], ["ManagerClassroom.getAcademicYearList()", "S"], ["ManagerRegister.deleteDelay()", "S"], ["ManagerRegister.getAbsenceByIDUserAndDate()", "S"], ["ManagerTeaching.getTeachings()", "S"], ["ManagerVotes.deleteVotesByUserIdYearTurn()", "S"], ["ManagerTeaching.update()", "S"], ["ManagerRegister.deleteJustify()", "S"], ["ManagerRegister.getJustifyByAbsence()", "S"], ["ManagerRegister.getDelayByIDUserAndDate()", "S"], ["ManagerAddress.delete()", "S"], ["ManagerTeaching.getTeachingById()", "S"], ["ManagerClassroom.insert()", "S"], ["ManagerClassroom.delete()", "S"], ["ManagerTeaching.getTeachingsByUserIdClassID()", "S"], ["ManagerAddress.getAddressId()", "S"], ["ManagerVotes.getTeachingIdByVotesId()", "S"], ["ManagerRegister.deleteNote()", "S"], ["ManagerVotes.update()", "S"], ["ManagerRegister.updateAbsence()", "S"], ["ManagerRegister.getNoteById()", "S"], ["ManagerRegister.insertAbsence()", "S"], ["ManagerVotes.getVotesById()", "S"], ["ManagerAddress.insert()", "S"], ["ManagerClassroom.getClassroomsByTeacher()", "S"], ["ManagerAddress.getAddressById()", "S"], ["ManagerRegister.updateJustify()", "S"], ["ManagerTeaching.delete()", "S"], ["ManagerVotes.getVotesByUserId()", "S"], ["ManagerAddress.getAddressNameById()", "S"], ["ManagerVotes.getIdVotes()", "S"], ["ManagerClassroom.getClassroomsByAcademicYear()", "S"], ["ManagerRegister.updateNote()", "S"], ["ManagerAddress.assignTeachingAsAddress()", "S"], ["ManagerTeaching.getTeachingsByClassroomId()", "S"], ["ManagerRegister.deleteAbsence()", "S"], ["ManagerRegister.getAbsenceByIdJustify()", "S"], ["ManagerClassroom.getClassroomByID()", "S"], ["ManagerRegister.insertNote()", "S"], ["ManagerAddress.getAddressTechings()", "S"]], "class_name": "DBConnection", "method_name": "getConnection", "params": []}, "ConnectionPoolDataSource.setActivedTimeout()": {"calls": [], "called_by": [["DBConnection.loadPool()", "M"]], "class_name": "ConnectionPoolDataSource", "method_name": "setActivedTimeout", "params": []}, "ControlConnection.start()": {"calls": [], "called_by": [["DBConnection.loadPool()", "M"]], "class_name": "ControlConnection", "method_name": "start", "params": []}, "DBConnection.releaseConnection()": {"calls": [["ConnectionPoolDataSource.release()", "M"]], "called_by": [["ManagerRegister.getNoteByIDUserAndAcademicYear()", "S"], ["Utility.getMaxValue()", "S"], ["ManagerAddress.exists()", "S"], ["ManagerAddress.getAddressList()", "S"], ["ManagerTeaching.getTeachingsByIdUserIdClassroom()", "S"], ["ManagerRegister.getAbsenceByIDUserAndAcademicYear()", "S"], ["ManagerRegister.exists()", "S"], ["ManagerTeaching.getTeachingNameById()", "S"], ["ManagerTeaching.getTeachingsByUserId()", "S"], ["ManagerVotes.delete()", "S"], ["ManagerTeaching.exists()", "S"], ["ManagerVotes.getVotes()", "S"], ["ManagerRegister.insertJustify()", "S"], ["ManagerAddress.hasTeaching()", "S"], ["ManagerClassroom.update()", "S"], ["ManagerTeaching.getTeachingId()", "S"], ["ManagerVotes.insert()", "S"], ["ManagerClassroom.exists()", "S"], ["ManagerRegister.insertDelay()", "S"], ["ManagerRegister.getDelayById()", "S"], ["ManagerRegister.getJustifyByIdJustify()", "S"], ["ManagerVotes.exists()", "S"], ["ManagerVotes.getVotesByUserIdYearTurn()", "S"], ["ManagerAddress.removeTeachingAsAddress()", "S"], ["ManagerTeaching.getTeachingsByClassroomName()", "S"], ["ManagerTeaching.insert()", "S"], ["ManagerRegister.getAbsenceByIdAbsence()", "S"], ["ManagerTeaching.hasTeacher()", "S"], ["ManagerClassroom.getClassroomsByTeacherAcademicYear()", "S"], ["ManagerRegister.updateDelay()", "S"], ["ManagerClassroom.getClassroomsByStudent()", "S"], ["ManagerClassroom.getAcademicYearList()", "S"], ["ManagerRegister.deleteDelay()", "S"], ["ManagerRegister.getAbsenceByIDUserAndDate()", "S"], ["ManagerTeaching.getTeachings()", "S"], ["ManagerVotes.deleteVotesByUserIdYearTurn()", "S"], ["ManagerTeaching.update()", "S"], ["ManagerRegister.deleteJustify()", "S"], ["ManagerRegister.getJustifyByAbsence()", "S"], ["ManagerRegister.getDelayByIDUserAndDate()", "S"], ["ManagerAddress.delete()", "S"], ["ManagerTeaching.getTeachingById()", "S"], ["ManagerClassroom.insert()", "S"], ["ManagerClassroom.delete()", "S"], ["ManagerTeaching.getTeachingsByUserIdClassID()", "S"], ["ManagerAddress.getAddressId()", "S"], ["ManagerVotes.getTeachingIdByVotesId()", "S"], ["ManagerRegister.deleteNote()", "S"], ["ManagerVotes.update()", "S"], ["ManagerRegister.updateAbsence()", "S"], ["ManagerRegister.getNoteById()", "S"], ["ManagerRegister.insertAbsence()", "S"], ["ManagerVotes.getVotesById()", "S"], ["ManagerAddress.insert()", "S"], ["ManagerClassroom.getClassroomsByTeacher()", "S"], ["ManagerAddress.getAddressById()", "S"], ["ManagerRegister.updateJustify()", "S"], ["ManagerTeaching.delete()", "S"], ["ManagerVotes.getVotesByUserId()", "S"], ["ManagerAddress.getAddressNameById()", "S"], ["ManagerVotes.getIdVotes()", "S"], ["ManagerClassroom.getClassroomsByAcademicYear()", "S"], ["ManagerRegister.updateNote()", "S"], ["ManagerAddress.assignTeachingAsAddress()", "S"], ["ManagerTeaching.getTeachingsByClassroomId()", "S"], ["ManagerRegister.deleteAbsence()", "S"], ["ManagerRegister.getAbsenceByIdJustify()", "S"], ["ManagerClassroom.getClassroomByID()", "S"], ["ManagerRegister.insertNote()", "S"], ["ManagerAddress.getAddressTechings()", "S"]], "class_name": "DBConnection", "method_name": "releaseConnection", "params": []}, "Utility.isNull()": {"calls": [["Utility.date2SQLString()", "S"], ["Utility.ReplaceAllStrings()", "S"]], "called_by": [["ManagerRegister.getNoteByIDUserAndAcademicYear()", "S"], ["ManagerAddress.exists()", "S"], ["ManagerTeaching.getTeachingsByIdUserIdClassroom()", "S"], ["ManagerRegister.getAbsenceByIDUserAndAcademicYear()", "S"], ["ManagerRegister.exists()", "S"], ["ManagerTeaching.getTeachingNameById()", "S"], ["ManagerTeaching.getTeachingsByUserId()", "S"], ["ManagerVotes.delete()", "S"], ["ManagerTeaching.exists()", "S"], ["ManagerRegister.insertJustify()", "S"], ["ManagerAddress.hasTeaching()", "S"], ["ManagerClassroom.update()", "S"], ["ManagerTeaching.getTeachingId()", "S"], ["ManagerVotes.insert()", "S"], ["TestRegister.main()", "S"], ["ManagerClassroom.exists()", "S"], ["ManagerRegister.insertDelay()", "S"], ["ManagerRegister.getDelayById()", "S"], ["ManagerRegister.getJustifyByIdJustify()", "S"], ["ManagerVotes.exists()", "S"], ["ManagerVotes.getVotesByUserIdYearTurn()", "S"], ["ManagerAddress.removeTeachingAsAddress()", "S"], ["ManagerTeaching.getTeachingsByClassroomName()", "S"], ["ManagerTeaching.insert()", "S"], ["ManagerRegister.getAbsenceByIdAbsence()", "S"], ["ManagerTeaching.hasTeacher()", "S"], ["ManagerClassroom.getClassroomsByStudent()", "S"], ["ManagerClassroom.getClassroomsByTeacherAcademicYear()", "S"], ["ManagerRegister.updateDelay()", "S"], ["ManagerRegister.getAbsenceByIDUserAndDate()", "S"], ["ManagerRegister.deleteDelay()", "S"], ["ManagerVotes.deleteVotesByUserIdYearTurn()", "S"], ["ManagerTeaching.update()", "S"], ["ManagerRegister.deleteJustify()", "S"], ["ManagerRegister.getJustifyByAbsence()", "S"], ["ManagerRegister.getDelayByIDUserAndDate()", "S"], ["ManagerAddress.delete()", "S"], ["ManagerTeaching.getTeachingById()", "S"], ["ManagerClassroom.insert()", "S"], ["ManagerClassroom.delete()", "S"], ["ManagerTeaching.getTeachingsByUserIdClassID()", "S"], ["ManagerAddress.getAddressId()", "S"], ["ManagerVotes.getTeachingIdByVotesId()", "S"], ["ManagerRegister.deleteNote()", "S"], ["ManagerVotes.update()", "S"], ["ManagerRegister.updateAbsence()", "S"], ["ManagerRegister.getNoteById()", "S"], ["ManagerRegister.insertAbsence()", "S"], ["ManagerVotes.getVotesById()", "S"], ["ManagerAddress.insert()", "S"], ["ManagerClassroom.getClassroomsByTeacher()", "S"], ["ManagerAddress.getAddressById()", "S"], ["ManagerRegister.updateJustify()", "S"], ["ManagerTeaching.delete()", "S"], ["ManagerVotes.getVotesByUserId()", "S"], ["ManagerAddress.getAddressNameById()", "S"], ["ManagerVotes.getIdVotes()", "S"], ["ManagerClassroom.getClassroomsByAcademicYear()", "S"], ["ManagerRegister.updateNote()", "S"], ["ManagerAddress.assignTeachingAsAddress()", "S"], ["ManagerTeaching.getTeachingsByClassroomId()", "S"], ["ManagerRegister.deleteAbsence()", "S"], ["ManagerRegister.getAbsenceByIdJustify()", "S"], ["ManagerClassroom.getClassroomByID()", "S"], ["ManagerRegister.insertNote()", "S"], ["ManagerAddress.getAddressTechings()", "S"]], "class_name": "Utility", "method_name": "isNull", "params": []}, "Address.getIdAddress()": {"calls": [], "called_by": [["ManagerAddress.hasTeaching()", "M"], ["ManagerAddress.removeTeachingAsAddress()", "M"], ["ManagerAddress.delete()", "M"], ["ManagerAddress.assignTeachingAsAddress()", "M"]], "class_name": "Address", "method_name": "getIdAddress", "params": []}, "Utility.queryOperation()": {"calls": [], "called_by": [["ManagerRegister.getNoteByIDUserAndAcademicYear()", "S"], ["Utility.getMaxValue()", "S"], ["ManagerAddress.exists()", "S"], ["ManagerAddress.getAddressList()", "S"], ["ManagerTeaching.getTeachingsByIdUserIdClassroom()", "S"], ["ManagerRegister.getAbsenceByIDUserAndAcademicYear()", "S"], ["ManagerRegister.exists()", "S"], ["ManagerTeaching.getTeachingNameById()", "S"], ["ManagerTeaching.getTeachingsByUserId()", "S"], ["ManagerTeaching.exists()", "S"], ["ManagerVotes.getVotes()", "S"], ["ManagerAddress.hasTeaching()", "S"], ["ManagerTeaching.getTeachingId()", "S"], ["ManagerClassroom.exists()", "S"], ["ManagerRegister.getDelayById()", "S"], ["ManagerRegister.getJustifyByIdJustify()", "S"], ["ManagerVotes.exists()", "S"], ["ManagerVotes.getVotesByUserIdYearTurn()", "S"], ["ManagerTeaching.getTeachingsByClassroomName()", "S"], ["ManagerRegister.getAbsenceByIdAbsence()", "S"], ["ManagerTeaching.hasTeacher()", "S"], ["ManagerTeaching.getTeachings()", "S"], ["ManagerClassroom.getClassroomsByStudent()", "S"], ["ManagerRegister.getAbsenceByIDUserAndDate()", "S"], ["ManagerClassroom.getClassroomsByTeacherAcademicYear()", "S"], ["ManagerClassroom.getAcademicYearList()", "S"], ["ManagerRegister.getJustifyByAbsence()", "S"], ["ManagerTeaching.getTeachingById()", "S"], ["ManagerRegister.getDelayByIDUserAndDate()", "S"], ["ManagerVotes.getTeachingIdByVotesId()", "S"], ["ManagerTeaching.getTeachingsByUserIdClassID()", "S"], ["ManagerAddress.getAddressId()", "S"], ["ManagerRegister.getNoteById()", "S"], ["ManagerVotes.getVotesById()", "S"], ["ManagerClassroom.getClassroomsByTeacher()", "S"], ["ManagerAddress.getAddressById()", "S"], ["ManagerVotes.getVotesByUserId()", "S"], ["ManagerAddress.getAddressNameById()", "S"], ["ManagerVotes.getIdVotes()", "S"], ["ManagerClassroom.getClassroomsByAcademicYear()", "S"], ["ManagerTeaching.getTeachingsByClassroomId()", "S"], ["ManagerRegister.getAbsenceByIdJustify()", "S"], ["ManagerClassroom.getClassroomByID()", "S"], ["ManagerAddress.getAddressTechings()", "S"]], "class_name": "Utility", "method_name": "queryOperation", "params": []}, "Address.getName()": {"calls": [], "called_by": [["ManagerAddress.getAddressId()", "M"], ["ManagerAddress.insert()", "M"], ["ManagerAddress.exists()", "M"]], "class_name": "Address", "method_name": "getName", "params": []}, "Utility.executeOperation()": {"calls": [], "called_by": [["ManagerRegister.deleteDelay()", "S"], ["ManagerVotes.deleteVotesByUserIdYearTurn()", "S"], ["ManagerTeaching.update()", "S"], ["ManagerRegister.deleteJustify()", "S"], ["ManagerAddress.delete()", "S"], ["ManagerClassroom.insert()", "S"], ["ManagerClassroom.delete()", "S"], ["ManagerVotes.delete()", "S"], ["ManagerRegister.deleteNote()", "S"], ["ManagerRegister.insertJustify()", "S"], ["ManagerVotes.update()", "S"], ["ManagerRegister.updateAbsence()", "S"], ["ManagerClassroom.update()", "S"], ["ManagerVotes.insert()", "S"], ["ManagerRegister.insertAbsence()", "S"], ["ManagerAddress.insert()", "S"], ["ManagerRegister.insertDelay()", "S"], ["ManagerRegister.updateJustify()", "S"], ["ManagerTeaching.delete()", "S"], ["ManagerAddress.removeTeachingAsAddress()", "S"], ["ManagerRegister.updateNote()", "S"], ["ManagerAddress.assignTeachingAsAddress()", "S"], ["ManagerTeaching.insert()", "S"], ["ManagerRegister.deleteAbsence()", "S"], ["ManagerRegister.insertNote()", "S"], ["ManagerRegister.updateDelay()", "S"]], "class_name": "Utility", "method_name": "executeOperation", "params": []}, "Utility.getMaxValue()": {"calls": [["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"]], "called_by": [["ManagerAddress.insert()", "S"], ["ManagerRegister.insertDelay()", "S"], ["ManagerTeaching.insert()", "S"], ["ManagerRegister.insertJustify()", "S"], ["ManagerVotes.insert()", "S"], ["ManagerRegister.insertAbsence()", "S"], ["ManagerRegister.insertNote()", "S"], ["ManagerClassroom.insert()", "S"]], "class_name": "Utility", "method_name": "getMaxValue", "params": []}, "Address.setIdAddress()": {"calls": [], "called_by": [["ManagerAddress.loadRecordFromRs()", "M"], ["ManagerAddress.insert()", "M"]], "class_name": "Address", "method_name": "setIdAddress", "params": []}, "ManagerAddress.getAddressId()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Address.getName()", "M"]], "called_by": [], "class_name": "ManagerAddress", "method_name": "getAddressId", "params": []}, "ManagerAddress.loadRecordFromRs()": {"calls": [["Address.setName()", "M"], ["Address.setIdAddress()", "M"]], "called_by": [["ManagerAddress.loadRecordsFromRs()", "O"], ["ManagerAddress.getAddressById()", "O"]], "class_name": "ManagerAddress", "method_name": "loadRecordFromRs", "params": []}, "ManagerAddress.loadRecordsFromRs()": {"calls": [["ManagerAddress.loadRecordFromRs()", "O"]], "called_by": [["ManagerAddress.getAddressList()", "O"]], "class_name": "ManagerAddress", "method_name": "loadRecordsFromRs", "params": []}, "ManagerAddress.getAddressNameById()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"]], "called_by": [], "class_name": "ManagerAddress", "method_name": "getAddressNameById", "params": []}, "ManagerAddress.getAddressTechings()": {"calls": [["Utility.isNull()", "S"], ["ManagerAddress.loadIntegersFromRs()", "O"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"]], "called_by": [], "class_name": "ManagerAddress", "method_name": "getAddressTechings", "params": []}, "ManagerAddress.loadIntegersFromRs()": {"calls": [], "called_by": [["ManagerAddress.getAddressTechings()", "O"]], "class_name": "ManagerAddress", "method_name": "loadIntegersFromRs", "params": []}, "Classroom.getName()": {"calls": [], "called_by": [["ManagerClassroom.exists()", "M"], ["ManagerClassroom.update()", "M"], ["ManagerClassroom.insert()", "M"]], "class_name": "Classroom", "method_name": "getName", "params": []}, "Classroom.setIdClassroom()": {"calls": [], "called_by": [["ManagerClassroom.loadRecordFromRs()", "M"], ["ManagerClassroom.insert()", "M"]], "class_name": "Classroom", "method_name": "setIdClassroom", "params": []}, "ManagerClassroom.update()": {"calls": [["Classroom.getIdClassroom()", "M"], ["Classroom.getName()", "M"], ["Utility.executeOperation()", "S"], ["Classroom.getIdAddress()", "M"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Classroom.getAcademicYear()", "M"]], "called_by": [], "class_name": "ManagerClassroom", "method_name": "update", "params": []}, "ManagerClassroom.getClassroomsByStudent()": {"calls": [["Utility.queryOperation()", "S"], ["ManagerUser.getUserId()", "M"], ["ManagerUser.exists()", "M"], ["ManagerClassroom.loadRecordsFromRs()", "O"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerUser.getInstance()", "S"], ["ManagerUser.isStudent()", "M"]], "called_by": [["ManagerClassroom.getClassroomByUserAcademicYear()", "M"]], "class_name": "ManagerClassroom", "method_name": "getClassroomsByStudent", "params": []}, "ManagerClassroom.loadRecordsFromRs()": {"calls": [["ManagerClassroom.loadRecordFromRs()", "O"]], "called_by": [["ManagerClassroom.getClassroomsByTeacher()", "O"], ["ManagerClassroom.getClassroomsByStudent()", "O"], ["ManagerClassroom.getClassroomsByAcademicYear()", "O"], ["ManagerClassroom.getClassroomsByTeacherAcademicYear()", "O"]], "class_name": "ManagerClassroom", "method_name": "loadRecordsFromRs", "params": []}, "ManagerClassroom.loadRecordFromRs()": {"calls": [["Classroom.setIdClassroom()", "M"], ["Classroom.setAcademicYear()", "M"], ["Classroom.setName()", "M"], ["Classroom.setIdAddress()", "M"]], "called_by": [["ManagerClassroom.loadRecordsFromRs()", "O"], ["ManagerClassroom.getClassroomByID()", "O"]], "class_name": "ManagerClassroom", "method_name": "loadRecordFromRs", "params": []}, "ManagerClassroom.loadIntegersFromRs()": {"calls": [], "called_by": [["ManagerClassroom.getAcademicYearList()", "O"]], "class_name": "ManagerClassroom", "method_name": "loadIntegersFromRs", "params": []}, "Absence.getIdAbsence()": {"calls": [], "called_by": [["ManagerRegister.exists()", "M"], ["ManagerRegister.updateAbsence()", "M"], ["ManagerRegister.deleteAbsence()", "M"]], "class_name": "Absence", "method_name": "getIdAbsence", "params": []}, "Delay.getIdDelay()": {"calls": [], "called_by": [["ManagerRegister.exists()", "M"], ["ManagerRegister.updateDelay()", "M"], ["ManagerRegister.deleteDelay()", "M"]], "class_name": "Delay", "method_name": "getIdDelay", "params": []}, "Absence.getIdUser()": {"calls": [], "called_by": [["ManagerRegister.updateAbsence()", "M"], ["ManagerRegister.insertAbsence()", "M"]], "class_name": "Absence", "method_name": "getIdUser", "params": []}, "Absence.getDateAbsence()": {"calls": [], "called_by": [["ManagerRegister.updateAbsence()", "M"], ["ManagerRegister.insertAbsence()", "M"]], "class_name": "Absence", "method_name": "getDateAbsence", "params": []}, "Absence.getIdJustify()": {"calls": [], "called_by": [["ManagerRegister.getJustifyByAbsence()", "M"], ["ManagerRegister.deleteAbsence()", "M"], ["ManagerRegister.updateAbsence()", "M"], ["ManagerRegister.hasJustify()", "M"], ["ManagerRegister.insertAbsence()", "M"]], "class_name": "Absence", "method_name": "getIdJustify", "params": []}, "Absence.getAcademicYear()": {"calls": [], "called_by": [["ManagerRegister.updateAbsence()", "M"], ["ManagerRegister.insertAbsence()", "M"]], "class_name": "Absence", "method_name": "getAcademicYear", "params": []}, "Absence.setIdAbsence()": {"calls": [], "called_by": [["ManagerRegister.insertAbsence()", "M"], ["ManagerRegister.loadAbsenceFromRs()", "M"]], "class_name": "Absence", "method_name": "setIdAbsence", "params": []}, "Delay.getIdUser()": {"calls": [], "called_by": [["ManagerRegister.insertDelay()", "M"], ["ManagerRegister.updateDelay()", "M"]], "class_name": "Delay", "method_name": "getIdUser", "params": []}, "Delay.getDateDelay()": {"calls": [], "called_by": [["ManagerRegister.insertDelay()", "M"], ["ManagerRegister.updateDelay()", "M"]], "class_name": "Delay", "method_name": "getDateDelay", "params": []}, "Delay.getTimeDelay()": {"calls": [], "called_by": [["ManagerRegister.insertDelay()", "M"], ["ManagerRegister.updateDelay()", "M"]], "class_name": "Delay", "method_name": "getTimeDelay", "params": []}, "Delay.getAcademicYear()": {"calls": [], "called_by": [["ManagerRegister.insertDelay()", "M"], ["ManagerRegister.updateDelay()", "M"]], "class_name": "Delay", "method_name": "getAcademicYear", "params": []}, "Delay.setIdDelay()": {"calls": [], "called_by": [["ManagerRegister.insertDelay()", "M"], ["ManagerRegister.loadDelayFromRs()", "M"]], "class_name": "Delay", "method_name": "setIdDelay", "params": []}, "Note.getDescription()": {"calls": [], "called_by": [["ManagerRegister.updateNote()", "M"], ["ManagerRegister.insertNote()", "M"]], "class_name": "Note", "method_name": "getDescription", "params": []}, "Note.getTeacher()": {"calls": [], "called_by": [["ManagerRegister.updateNote()", "M"], ["ManagerRegister.insertNote()", "M"]], "class_name": "Note", "method_name": "getTeacher", "params": []}, "Note.getIdUser()": {"calls": [], "called_by": [["ManagerRegister.updateNote()", "M"], ["ManagerRegister.insertNote()", "M"]], "class_name": "Note", "method_name": "getIdUser", "params": []}, "Note.getDateNote()": {"calls": [], "called_by": [["ManagerRegister.updateNote()", "M"], ["ManagerRegister.insertNote()", "M"]], "class_name": "Note", "method_name": "getDateNote", "params": []}, "Note.getAcademicYear()": {"calls": [], "called_by": [["ManagerRegister.updateNote()", "M"], ["ManagerRegister.insertNote()", "M"]], "class_name": "Note", "method_name": "getAcademicYear", "params": []}, "Justify.getIdUser()": {"calls": [], "called_by": [["ManagerRegister.updateJustify()", "M"], ["ManagerRegister.insertJustify()", "M"]], "class_name": "Justify", "method_name": "getIdUser", "params": []}, "Justify.getDateJustify()": {"calls": [], "called_by": [["ManagerRegister.updateJustify()", "M"], ["ManagerRegister.insertJustify()", "M"]], "class_name": "Justify", "method_name": "getDateJustify", "params": []}, "Justify.getAcademicYear()": {"calls": [], "called_by": [["ManagerRegister.updateJustify()", "M"], ["ManagerRegister.insertJustify()", "M"]], "class_name": "Justify", "method_name": "getAcademicYear", "params": []}, "Justify.setIdJustify()": {"calls": [], "called_by": [["ManagerRegister.loadJustifyFromRs()", "M"], ["TestRegister.main()", "M"], ["ManagerRegister.insertJustify()", "M"]], "class_name": "Justify", "method_name": "setIdJustify", "params": []}, "ManagerRegister.updateAbsence()": {"calls": [["Absence.getAcademicYear()", "M"], ["Absence.getIdJustify()", "M"], ["Utility.executeOperation()", "S"], ["Utility.isNull()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Absence.getIdUser()", "M"], ["Absence.getIdAbsence()", "M"], ["Absence.getDateAbsence()", "M"]], "called_by": [["ManagerRegister.deleteJustify()", "M"], ["ManagerRegister.insertJustify()", "M"]], "class_name": "ManagerRegister", "method_name": "updateAbsence", "params": []}, "ManagerRegister.getAbsenceByIdJustify()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.loadAbsenceFromRs()", "O"]], "called_by": [["ManagerRegister.deleteJustify()", "M"]], "class_name": "ManagerRegister", "method_name": "getAbsenceByIdJustify", "params": []}, "ManagerRegister.loadNoteFromRs()": {"calls": [["Note.setDateNote()", "M"], ["Note.setAcademicYear()", "M"], ["Note.setTeacher()", "M"], ["Note.setDescription()", "M"], ["Note.setIdUser()", "M"], ["Note.setIdNote()", "M"]], "called_by": [["ManagerRegister.getNoteByIDUserAndAcademicYear()", "O"], ["ManagerRegister.getNoteById()", "O"]], "class_name": "ManagerRegister", "method_name": "loadNoteFromRs", "params": []}, "ManagerRegister.loadAbsenceFromRs()": {"calls": [["Absence.setIdUser()", "M"], ["Absence.setIdJustify()", "M"], ["Absence.setAcademicYear()", "M"], ["Absence.setIdAbsence()", "M"], ["Absence.setDateAbsence()", "M"]], "called_by": [["ManagerRegister.getAbsenceByIdAbsence()", "O"], ["ManagerRegister.getAbsenceByIDUserAndAcademicYear()", "O"], ["ManagerRegister.getAbsenceByIdJustify()", "O"], ["ManagerRegister.getAbsenceByIDUserAndDate()", "O"]], "class_name": "ManagerRegister", "method_name": "loadAbsenceFromRs", "params": []}, "ManagerRegister.getDelayById()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.loadDelayFromRs()", "O"]], "called_by": [], "class_name": "ManagerRegister", "method_name": "getDelayById", "params": []}, "ManagerRegister.loadDelayFromRs()": {"calls": [["Delay.setIdUser()", "M"], ["Delay.setTimeDelay()", "M"], ["Delay.setDateDelay()", "M"], ["Delay.setIdDelay()", "M"], ["Delay.setAcademicYear()", "M"]], "called_by": [["ManagerRegister.getDelayByIDUserAndDate()", "O"], ["ManagerRegister.getDelayById()", "O"]], "class_name": "ManagerRegister", "method_name": "loadDelayFromRs", "params": []}, "ManagerRegister.loadJustifyFromRs()": {"calls": [["Justify.setDateJustify()", "M"], ["Justify.setAcademicYear()", "M"], ["Justify.setIdJustify()", "M"], ["Justify.setIdUser()", "M"]], "called_by": [["ManagerRegister.getJustifyByIdJustify()", "O"], ["ManagerRegister.getJustifyByAbsence()", "O"]], "class_name": "ManagerRegister", "method_name": "loadJustifyFromRs", "params": []}, "ManagerRegister.hasJustify()": {"calls": [["ManagerRegister.exists()", "M"], ["Absence.getIdJustify()", "M"]], "called_by": [], "class_name": "ManagerRegister", "method_name": "hasJustify", "params": []}, "ManagerRegister.getJustifyByAbsence()": {"calls": [["ManagerRegister.exists()", "M"], ["Utility.isNull()", "S"], ["Absence.getIdJustify()", "M"], ["Utility.queryOperation()", "S"], ["DBConnection.getConnection()", "S"], ["DBConnection.releaseConnection()", "S"], ["ManagerRegister.loadJustifyFromRs()", "O"]], "called_by": [], "class_name": "ManagerRegister", "method_name": "getJustifyByAbsence", "params": []}, "ManagerRegister.getAbsenceByIDUserAndDate()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.loadAbsenceFromRs()", "O"]], "called_by": [["ManagerRegister.getRegisterByClassIDAndDate()", "M"]], "class_name": "ManagerRegister", "method_name": "getAbsenceByIDUserAndDate", "params": []}, "ManagerRegister.getDelayByIDUserAndDate()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerRegister.loadDelayFromRs()", "O"]], "called_by": [["ManagerRegister.getRegisterByClassIDAndDate()", "M"]], "class_name": "ManagerRegister", "method_name": "getDelayByIDUserAndDate", "params": []}, "RegisterLine.setStudent()": {"calls": [], "called_by": [["ManagerRegister.getRegisterByClassIDAndDate()", "M"]], "class_name": "RegisterLine", "method_name": "setStudent", "params": []}, "RegisterLine.setAbsence()": {"calls": [], "called_by": [["ManagerRegister.getRegisterByClassIDAndDate()", "M"]], "class_name": "RegisterLine", "method_name": "setAbsence", "params": []}, "RegisterLine.setDelay()": {"calls": [], "called_by": [["ManagerRegister.getRegisterByClassIDAndDate()", "M"]], "class_name": "RegisterLine", "method_name": "setDelay", "params": []}, "Teaching.getName()": {"calls": [], "called_by": [["ManagerTeaching.update()", "M"], ["ManagerTeaching.getTeachingId()", "M"], ["ManagerTeaching.exists()", "M"], ["ManagerTeaching.insert()", "M"]], "class_name": "Teaching", "method_name": "getName", "params": []}, "ManagerTeaching.getTeachingNameById()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"]], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingNameById", "params": []}, "ManagerTeaching.loadRecordFromRs()": {"calls": [["Teaching.setId()", "M"], ["Teaching.setName()", "M"]], "called_by": [["ManagerTeaching.loadRecordsFromRs()", "O"], ["ManagerTeaching.getTeachingById()", "O"]], "class_name": "ManagerTeaching", "method_name": "loadRecordFromRs", "params": []}, "ManagerTeaching.loadRecordsFromRs()": {"calls": [["ManagerTeaching.loadRecordFromRs()", "O"]], "called_by": [["ManagerTeaching.getTeachingsByUserId()", "O"], ["ManagerTeaching.getTeachings()", "O"], ["ManagerTeaching.getTeachingsByClassroomName()", "O"], ["ManagerTeaching.getTeachingsByUserIdClassID()", "O"], ["ManagerTeaching.getTeachingsByClassroomId()", "O"], ["ManagerTeaching.getTeachingsByIdUserIdClassroom()", "O"]], "class_name": "ManagerTeaching", "method_name": "loadRecordsFromRs", "params": []}, "ManagerTeaching.getTeachingsByUserId()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerTeaching.loadRecordsFromRs()", "O"]], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingsByUserId", "params": []}, "ManagerTeaching.getTeachingsByUserIdClassID()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerTeaching.loadRecordsFromRs()", "O"]], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingsByUserIdClassID", "params": []}, "ManagerTeaching.hasTeacher()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["Teaching.getId()", "M"]], "called_by": [], "class_name": "ManagerTeaching", "method_name": "hasTeacher", "params": []}, "ManagerTeaching.getTeachingsByClassroomName()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerTeaching.loadRecordsFromRs()", "O"]], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingsByClassroomName", "params": []}, "ManagerTeaching.getTeachingsByIdUserIdClassroom()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerTeaching.loadRecordsFromRs()", "O"]], "called_by": [], "class_name": "ManagerTeaching", "method_name": "getTeachingsByIdUserIdClassroom", "params": []}, "ManagerVotes.exists()": {"calls": [["Utility.isNull()", "S"], ["Votes.getId_votes()", "M"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"]], "called_by": [], "class_name": "ManagerVotes", "method_name": "exists", "params": []}, "Votes.getId_votes()": {"calls": [], "called_by": [["ManagerVotes.update()", "M"], ["ManagerVotes.delete()", "M"], ["ManagerVotes.exists()", "M"], ["ManagerVotes.getIdVotes()", "M"]], "class_name": "Votes", "method_name": "getId_votes", "params": []}, "Votes.getId_user()": {"calls": [], "called_by": [["ManagerVotes.update()", "M"], ["ManagerVotes.insert()", "M"]], "class_name": "Votes", "method_name": "getId_user", "params": []}, "Votes.getTeaching()": {"calls": [], "called_by": [["ManagerVotes.update()", "M"], ["ManagerVotes.insert()", "M"]], "class_name": "Votes", "method_name": "getTeaching", "params": []}, "Votes.getWritten()": {"calls": [], "called_by": [["ManagerVotes.update()", "M"], ["ManagerVotes.insert()", "M"]], "class_name": "Votes", "method_name": "getWritten", "params": []}, "Votes.getOral()": {"calls": [], "called_by": [["ManagerVotes.update()", "M"], ["ManagerVotes.insert()", "M"]], "class_name": "Votes", "method_name": "getOral", "params": []}, "Votes.getLaboratory()": {"calls": [], "called_by": [["ManagerVotes.update()", "M"], ["ManagerVotes.insert()", "M"]], "class_name": "Votes", "method_name": "getLaboratory", "params": []}, "Votes.getAccademicYear()": {"calls": [], "called_by": [["ManagerVotes.update()", "M"], ["ManagerVotes.insert()", "M"]], "class_name": "Votes", "method_name": "getAccademicYear", "params": []}, "Votes.getTurn()": {"calls": [], "called_by": [["ManagerVotes.update()", "M"], ["ManagerVotes.insert()", "M"]], "class_name": "Votes", "method_name": "getTurn", "params": []}, "Votes.setId_votes()": {"calls": [], "called_by": [["ManagerVotes.insert()", "M"], ["ManagerVotes.loadRecordFromRs()", "M"]], "class_name": "Votes", "method_name": "setId_votes", "params": []}, "ManagerVotes.loadRecordFromRs()": {"calls": [["Votes.setId_votes()", "M"], ["Votes.setLaboratory()", "M"], ["Votes.setTurn()", "M"], ["Votes.setOral()", "M"], ["Votes.setAccademicYear()", "M"], ["Votes.setWritten()", "M"], ["Votes.setId_user()", "M"], ["Votes.setTeaching()", "M"]], "called_by": [["ManagerVotes.getVotesById()", "O"], ["ManagerVotes.getIdVotes()", "O"], ["ManagerVotes.loadRecordsFromRs()", "O"]], "class_name": "ManagerVotes", "method_name": "loadRecordFromRs", "params": []}, "ManagerVotes.getTeachingIdByVotesId()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"]], "called_by": [], "class_name": "ManagerVotes", "method_name": "getTeachingIdByVotesId", "params": []}, "ManagerVotes.getVotes()": {"calls": [["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerVotes.loadRecordsFromRs()", "O"]], "called_by": [], "class_name": "ManagerVotes", "method_name": "getVotes", "params": []}, "ManagerVotes.loadRecordsFromRs()": {"calls": [["ManagerVotes.loadRecordFromRs()", "O"]], "called_by": [["ManagerVotes.getVotesByUserIdYearTurn()", "O"], ["ManagerVotes.getVotes()", "O"], ["ManagerVotes.getVotesByUserId()", "O"]], "class_name": "ManagerVotes", "method_name": "loadRecordsFromRs", "params": []}, "ManagerVotes.getVotesByUserId()": {"calls": [["Utility.isNull()", "S"], ["Utility.queryOperation()", "S"], ["DBConnection.releaseConnection()", "S"], ["DBConnection.getConnection()", "S"], ["ManagerVotes.loadRecordsFromRs()", "O"]], "called_by": [], "class_name": "ManagerVotes", "method_name": "getVotesByUserId", "params": []}, "TestRegister.main()": {"calls": [["Absence.setIdUser()", "M"], ["ManagerRegister.insertDelay()", "M"], ["Delay.setIdUser()", "M"], ["Absence.setDateAbsence()", "M"], ["ManagerRegister.getRegisterByClassIDAndDate()", "M"], ["Utility.isNull()", "S"], ["Justify.setIdJustify()", "M"], ["Delay.setTimeDelay()", "M"], ["Note.setAcademicYear()", "M"], ["Delay.setDateDelay()", "M"], ["Note.setIdUser()", "M"], ["Note.setDateNote()", "M"], ["ManagerRegister.getInstance()", "S"], ["ManagerRegister.hasAbsence()", "M"], ["Note.setDescription()", "M"], ["Note.setIdNote()", "M"], ["RegisterLine.getStudent()", "M"], ["Absence.setIdJustify()", "M"], ["Absence.setAcademicYear()", "M"], ["UserListItem.getName()", "M"], ["Justify.setIdUser()", "M"], ["Note.setTeacher()", "M"], ["Justify.setDateJustify()", "M"], ["Justify.setAcademicYear()", "M"], ["ManagerRegister.hasDelay()", "M"], ["Delay.setAcademicYear()", "M"]], "called_by": [], "class_name": "TestRegister", "method_name": "main", "params": []}, "UserListItem.getName()": {"calls": [], "called_by": [["TestRegister.main()", "M"]], "class_name": "UserListItem", "method_name": "getName", "params": []}, "UserTest.main()": {"calls": [["Teaching.setId()", "M"], ["Votes.setId_user()", "M"], ["UserListItem.setId()", "M"], ["Votes.setTurn()", "M"], ["ManagerVotes.getInstance()", "S"], ["Votes.setOral()", "M"], ["Votes.setAccademicYear()", "M"], ["Votes.setWritten()", "M"], ["Votes.setLaboratory()", "M"], ["ManagerVotes.insert()", "M"], ["Votes.setTeaching()", "M"]], "called_by": [], "class_name": "UserTest", "method_name": "main", "params": []}, "MailUtility.sendMail()": {"calls": [["Utility.getServerSmtp()", "S"]], "called_by": [], "class_name": "MailUtility", "method_name": "sendMail", "params": []}, "Utility.getServerSmtp()": {"calls": [], "called_by": [["MailUtility.sendMail()", "S"]], "class_name": "Utility", "method_name": "getServerSmtp", "params": []}, "Utility.ReplaceAllStrings()": {"calls": [], "called_by": [["Utility.isNull()", "S"]], "class_name": "Utility", "method_name": "ReplaceAllStrings", "params": []}, "Utility.date2SQLString()": {"calls": [], "called_by": [["Utility.isNull()", "S"]], "class_name": "Utility", "method_name": "date2SQLString", "params": []}}